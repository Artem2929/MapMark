import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import CustomSelect from '../ui/CustomSelect';
import { validateCreateAdForm } from '../../utils/createAdValidation';
import './CreateAdForm.css';

const CreateAdForm = ({ onClose }) => {
  const { t, i18n } = useTranslation();
  const [currentStep, setCurrentStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [uploadingPhotos, setUploadingPhotos] = useState(false);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category: '',
    subcategory: '',
    country: '',
    city: '',
    address: '',
    details: '',
    price: '',
    currency: 'USD',
    contactPhone: '',
    contactEmail: '',
    photos: []
  });
  const [errors, setErrors] = useState({});

  const categories = [
    { value: '', label: i18n.language.includes('uk') ? '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é' : 'Select category' },
    { value: 'realty', label: `üè† ${i18n.language.includes('uk') ? '–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å' : 'Real Estate'}` },
    { value: 'transport', label: `üöó ${i18n.language.includes('uk') ? '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç' : 'Transport'}` },
    { value: 'work', label: `üíº ${i18n.language.includes('uk') ? '–†–æ–±–æ—Ç–∞' : 'Work'}` },
    { value: 'services', label: `üîß ${i18n.language.includes('uk') ? '–ü–æ—Å–ª—É–≥–∏' : 'Services'}` },
    { value: 'electronics', label: `üì± ${i18n.language.includes('uk') ? '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞' : 'Electronics'}` },
    { value: 'places', label: `üçΩÔ∏è ${i18n.language.includes('uk') ? '–ó–∞–∫–ª–∞–¥–∏' : 'Places'}` },
    { value: 'entertainment', label: `üéØ ${i18n.language.includes('uk') ? '–†–æ–∑–≤–∞–≥–∏' : 'Entertainment'}` }
  ];

  const getSubcategories = () => {
    const subcategories = [
      { value: '', label: i18n.language.includes('uk') ? '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é' : 'Select subcategory' }
    ];

    if (formData.category === 'realty') {
      subcategories.push(
        { value: 'apartments', label: `üè¢ ${i18n.language.includes('uk') ? '–ö–≤–∞—Ä—Ç–∏—Ä–∏' : 'Apartments'}` },
        { value: 'houses', label: `üè° ${i18n.language.includes('uk') ? '–ë—É–¥–∏–Ω–∫–∏' : 'Houses'}` },
        { value: 'commercial', label: `üè¨ ${i18n.language.includes('uk') ? '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞' : 'Commercial'}` },
        { value: 'land', label: `üåæ ${i18n.language.includes('uk') ? '–ó–µ–º–ª—è' : 'Land'}` }
      );
    } else if (formData.category === 'transport') {
      subcategories.push(
        { value: 'cars', label: `üöô ${i18n.language.includes('uk') ? '–ê–≤—Ç–æ' : 'Cars'}` },
        { value: 'motorcycles', label: `üèçÔ∏è ${i18n.language.includes('uk') ? '–ú–æ—Ç–æ' : 'Motorcycles'}` },
        { value: 'trucks', label: `üöõ ${i18n.language.includes('uk') ? '–í–∞–Ω—Ç–∞–∂—ñ–≤–∫–∏' : 'Trucks'}` },
        { value: 'boats', label: `‚õµ ${i18n.language.includes('uk') ? '–í–æ–¥–Ω–∏–π' : 'Boats'}` }
      );
    } else if (formData.category === 'work') {
      subcategories.push(
        { value: 'vacancies', label: `üìã ${i18n.language.includes('uk') ? '–í–∞–∫–∞–Ω—Å—ñ—ó' : 'Vacancies'}` },
        { value: 'resumes', label: `üìÑ ${i18n.language.includes('uk') ? '–†–µ–∑—é–º–µ' : 'Resumes'}` },
        { value: 'freelance', label: `üíª ${i18n.language.includes('uk') ? '–§—Ä—ñ–ª–∞–Ω—Å' : 'Freelance'}` }
      );
    } else if (formData.category === 'services') {
      subcategories.push(
        { value: 'construction', label: `üî® ${i18n.language.includes('uk') ? '–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ' : 'Construction'}` },
        { value: 'household', label: `üè† ${i18n.language.includes('uk') ? '–ü–æ–±—É—Ç–æ–≤—ñ' : 'Household'}` },
        { value: 'education', label: `üìö ${i18n.language.includes('uk') ? '–û—Å–≤—ñ—Ç–∞' : 'Education'}` },
        { value: 'beauty', label: `üíÑ ${i18n.language.includes('uk') ? '–ö—Ä–∞—Å–∞' : 'Beauty'}` }
      );
    } else if (formData.category === 'electronics') {
      subcategories.push(
        { value: 'smartphones', label: `üì± ${i18n.language.includes('uk') ? '–¢–µ–ª–µ—Ñ–æ–Ω–∏' : 'Smartphones'}` },
        { value: 'computers', label: `üíª ${i18n.language.includes('uk') ? '–ö–æ–º–ø\'—é—Ç–µ—Ä–∏' : 'Computers'}` },
        { value: 'appliances', label: `üîå ${i18n.language.includes('uk') ? '–¢–µ—Ö–Ω—ñ–∫–∞' : 'Appliances'}` }
      );
    } else if (formData.category === 'places') {
      subcategories.push(
        { value: 'cafe', label: `‚òï ${i18n.language.includes('uk') ? '–ö–∞—Ñ–µ' : 'Cafe'}` },
        { value: 'restaurant', label: `üçΩÔ∏è ${i18n.language.includes('uk') ? '–†–µ—Å—Ç–æ—Ä–∞–Ω–∏' : 'Restaurants'}` },
        { value: 'hotel', label: `üè® ${i18n.language.includes('uk') ? '–ì–æ—Ç–µ–ª—ñ' : 'Hotels'}` }
      );
    } else if (formData.category === 'entertainment') {
      subcategories.push(
        { value: 'park', label: `üå≥ ${i18n.language.includes('uk') ? '–ü–∞—Ä–∫–∏' : 'Parks'}` },
        { value: 'museum', label: `üèõÔ∏è ${i18n.language.includes('uk') ? '–ú—É–∑–µ—ó' : 'Museums'}` },
        { value: 'shop', label: `üõçÔ∏è ${i18n.language.includes('uk') ? '–ú–∞–≥–∞–∑–∏–Ω–∏' : 'Shops'}` }
      );
    }

    return subcategories;
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ 
      ...prev, 
      [field]: value,
      ...(field === 'category' ? { subcategory: '' } : {}),
      ...(field === 'country' ? { city: '' } : {})
    }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
    
    // Auto-save to localStorage
    const updatedData = { ...formData, [field]: value };
    localStorage.setItem('createAdFormData', JSON.stringify(updatedData));
  };

  // Load saved data on component mount
  React.useEffect(() => {
    const savedData = localStorage.getItem('createAdFormData');
    if (savedData) {
      try {
        const parsedData = JSON.parse(savedData);
        setFormData(prev => ({ ...prev, ...parsedData, photos: [] })); // Don't restore photos
      } catch (error) {
        console.error('Error loading saved form data:', error);
      }
    }
  }, []);

  // Clear saved data when form is submitted successfully
  React.useEffect(() => {
    if (currentStep === 3) {
      localStorage.removeItem('createAdFormData');
    }
  }, [currentStep]);

  const validateStep1 = () => {
    const validation = validateCreateAdForm(formData, 1, i18n);
    setErrors(validation.errors);
    return validation.isValid;
  };

  const validateStep2 = () => {
    const validation = validateCreateAdForm(formData, 2, i18n);
    setErrors(validation.errors);
    return validation.isValid;
  };

  const handleNext = async () => {
    if (currentStep === 1 && validateStep1()) {
      setCurrentStep(2);
    } else if (currentStep === 2 && validateStep2()) {
      setIsSubmitting(true);
      try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 2000));
        console.log('Form submitted:', formData);
        setCurrentStep(3);
      } catch (error) {
        console.error('Submission error:', error);
        setErrors({ submit: i18n.language.includes('uk') ? '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è' : 'Error creating ad' });
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  const handlePhotoUpload = (event) => {
    const files = Array.from(event.target.files);
    
    // Validate file count
    if (files.length + formData.photos.length > 5) {
      setErrors(prev => ({ ...prev, photos: i18n.language.includes('uk') ? '–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ' : 'Maximum 5 photos' }));
      return;
    }
    
    // Validate files before upload
    const tempFormData = { ...formData, photos: [...formData.photos, ...files.map(file => ({ file }))] };
    const validation = validateCreateAdForm(tempFormData, 1, i18n);
    
    if (validation.errors.photos) {
      setErrors(prev => ({ ...prev, photos: validation.errors.photos }));
      return;
    }
    
    setUploadingPhotos(true);
    const newPhotos = files.map(file => ({
      id: Date.now() + Math.random(),
      file,
      url: URL.createObjectURL(file),
      name: file.name
    }));
    
    setTimeout(() => {
      setFormData(prev => ({ ...prev, photos: [...prev.photos, ...newPhotos] }));
      setUploadingPhotos(false);
      if (errors.photos) {
        setErrors(prev => ({ ...prev, photos: null }));
      }
    }, 1000);
  };

  const removePhoto = (photoId) => {
    setFormData(prev => ({
      ...prev,
      photos: prev.photos.filter(photo => photo.id !== photoId)
    }));
  };

  const currencies = [
    { value: 'USD', label: '$ USD' },
    { value: 'EUR', label: '‚Ç¨ EUR' },
    { value: 'UAH', label: '‚Ç¥ UAH' },
    { value: 'PLN', label: 'z≈Ç PLN' }
  ];

  const handleBack = () => {
    setCurrentStep(1);
  };

  const isStep1Valid = () => {
    return formData.title.trim().length >= 5 && 
           formData.description.trim().length >= 20 && 
           formData.category && 
           formData.subcategory && 
           formData.photos.length > 0;
  };

  const isStep2Valid = () => {
    return formData.country && 
           formData.city && 
           formData.address.trim() && 
           formData.details && 
           formData.price.trim() && 
           !isNaN(parseFloat(formData.price)) && 
           parseFloat(formData.price) > 0 &&
           (formData.contactPhone.trim() || formData.contactEmail.trim());
  };

  const countries = [
    { value: '', label: i18n.language.includes('uk') ? '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É' : 'Select country' },
    { value: 'usa', label: `üá∫üá∏ ${i18n.language.includes('uk') ? '–°–®–ê' : 'USA'}` },
    { value: 'ukraine', label: `üá∫üá¶ ${i18n.language.includes('uk') ? '–£–∫—Ä–∞—ó–Ω–∞' : 'Ukraine'}` }
  ];

  const getCities = () => {
    const cities = [
      { value: '', label: i18n.language.includes('uk') ? '–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ' : 'Select city' }
    ];

    if (formData.country === 'usa') {
      cities.push(
        { value: 'new-york', label: 'New York' },
        { value: 'los-angeles', label: 'Los Angeles' },
        { value: 'chicago', label: 'Chicago' },
        { value: 'houston', label: 'Houston' },
        { value: 'miami', label: 'Miami' }
      );
    } else if (formData.country === 'ukraine') {
      cities.push(
        { value: 'kyiv', label: i18n.language.includes('uk') ? '–ö–∏—ó–≤' : 'Kyiv' },
        { value: 'kharkiv', label: i18n.language.includes('uk') ? '–•–∞—Ä–∫—ñ–≤' : 'Kharkiv' },
        { value: 'odesa', label: i18n.language.includes('uk') ? '–û–¥–µ—Å–∞' : 'Odesa' },
        { value: 'dnipro', label: i18n.language.includes('uk') ? '–î–Ω—ñ–ø—Ä–æ' : 'Dnipro' },
        { value: 'lviv', label: i18n.language.includes('uk') ? '–õ—å–≤—ñ–≤' : 'Lviv' }
      );
    }

    return cities;
  };

  const getDetailsOptions = () => {
    const details = [
      { value: '', label: i18n.language.includes('uk') ? '–û–±–µ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ' : 'Select details' }
    ];

    if (formData.subcategory === 'apartments') {
      details.push(
        { value: '1-room', label: i18n.language.includes('uk') ? '1 –∫—ñ–º–Ω–∞—Ç–∞' : '1 room' },
        { value: '2-room', label: i18n.language.includes('uk') ? '2 –∫—ñ–º–Ω–∞—Ç–∏' : '2 rooms' },
        { value: '3-room', label: i18n.language.includes('uk') ? '3 –∫—ñ–º–Ω–∞—Ç–∏' : '3 rooms' },
        { value: '4-room', label: i18n.language.includes('uk') ? '4+ –∫—ñ–º–Ω–∞—Ç' : '4+ rooms' }
      );
    } else if (formData.subcategory === 'cars') {
      details.push(
        { value: 'sedan', label: i18n.language.includes('uk') ? '–°–µ–¥–∞–Ω' : 'Sedan' },
        { value: 'suv', label: i18n.language.includes('uk') ? '–ü–æ–∑–∞—à–ª—è—Ö–æ–≤–∏–∫' : 'SUV' },
        { value: 'hatchback', label: i18n.language.includes('uk') ? '–•–µ—Ç—á–±–µ–∫' : 'Hatchback' },
        { value: 'coupe', label: i18n.language.includes('uk') ? '–ö—É–ø–µ' : 'Coupe' }
      );
    } else if (formData.subcategory === 'vacancies') {
      details.push(
        { value: 'full-time', label: i18n.language.includes('uk') ? '–ü–æ–≤–Ω–∏–π –¥–µ–Ω—å' : 'Full-time' },
        { value: 'part-time', label: i18n.language.includes('uk') ? '–ù–µ–ø–æ–≤–Ω–∏–π –¥–µ–Ω—å' : 'Part-time' },
        { value: 'remote', label: i18n.language.includes('uk') ? '–í—ñ–¥–¥–∞–ª–µ–Ω–æ' : 'Remote' },
        { value: 'contract', label: i18n.language.includes('uk') ? '–ö–æ–Ω—Ç—Ä–∞–∫—Ç' : 'Contract' }
      );
    } else if (formData.subcategory === 'smartphones') {
      details.push(
        { value: 'new', label: i18n.language.includes('uk') ? '–ù–æ–≤–∏–π' : 'New' },
        { value: 'used', label: i18n.language.includes('uk') ? '–í–∂–∏–≤–∞–Ω–∏–π' : 'Used' },
        { value: 'refurbished', label: i18n.language.includes('uk') ? '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–∏–π' : 'Refurbished' }
      );
    } else {
      details.push(
        { value: 'excellent', label: i18n.language.includes('uk') ? '–í—ñ–¥–º—ñ–Ω–Ω–∏–π —Å—Ç–∞–Ω' : 'Excellent condition' },
        { value: 'good', label: i18n.language.includes('uk') ? '–•–æ—Ä–æ—à–∏–π —Å—Ç–∞–Ω' : 'Good condition' },
        { value: 'fair', label: i18n.language.includes('uk') ? '–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π —Å—Ç–∞–Ω' : 'Fair condition' }
      );
    }

    return details;
  };

  return (
    <div className="create-ad-overlay">
      <div className="create-ad-form">
        <div className="form-header">
          <h3>{t('createAdForm.title')}</h3>
          <button className="close-btn" onClick={onClose}>√ó</button>
        </div>

        {errors.submit && (
          <div className="error-message">
            {errors.submit}
          </div>
        )}

        {currentStep === 1 && (
          <div className="step-content">
            <div className={`form-group ${errors.title ? 'has-error' : ''}`}>
              <label>{t('createAdForm.step1.title')} *</label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                placeholder={t('createAdForm.step1.titlePlaceholder')}
                className={errors.title ? 'input-error' : ''}
                maxLength="100"
              />
              <div className="char-counter">{formData.title.length}/100</div>
              {errors.title && <span className="field-error">{errors.title}</span>}
            </div>

            <div className={`form-group ${errors.description ? 'has-error' : ''}`}>
              <label>{t('createAdForm.step1.description')} *</label>
              <textarea
                value={formData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                placeholder={t('createAdForm.step1.descriptionPlaceholder')}
                className={errors.description ? 'input-error' : ''}
                rows="4"
                maxLength="1000"
              />
              <div className="char-counter">{formData.description.length}/1000</div>
              {errors.description && <span className="field-error">{errors.description}</span>}
            </div>

            <div className={`form-group ${errors.category ? 'has-error' : ''}`}>
              <label>{t('createAdForm.step1.category')} *</label>
              <CustomSelect
                value={formData.category}
                onChange={(value) => handleInputChange('category', value)}
                options={categories}
                className={errors.category ? 'error' : ''}
              />
              {errors.category && <span className="field-error">{errors.category}</span>}
            </div>

            {formData.category && (
              <div className={`form-group ${errors.subcategory ? 'has-error' : ''}`}>
                <label>{t('createAdForm.step1.subcategory')} *</label>
                <CustomSelect
                  value={formData.subcategory}
                  onChange={(value) => handleInputChange('subcategory', value)}
                  options={getSubcategories()}
                  className={errors.subcategory ? 'error' : ''}
                />
                {errors.subcategory && <span className="field-error">{errors.subcategory}</span>}
              </div>
            )}

            <div className={`form-group ${errors.photos ? 'has-error' : ''}`}>
              <label>{t('createAdForm.step1.photos')} * ({formData.photos.length}/5)</label>
              <div className="photo-upload-area">
                <input
                  type="file"
                  id="photo-upload"
                  multiple
                  accept="image/*"
                  onChange={handlePhotoUpload}
                  style={{ display: 'none' }}
                  disabled={formData.photos.length >= 5 || uploadingPhotos}
                />
                <label htmlFor="photo-upload" className={`photo-upload-btn ${formData.photos.length >= 5 ? 'disabled' : ''}`}>
                  {uploadingPhotos ? (
                    <>üîÑ {t('createAdForm.step1.uploading')}</>
                  ) : (
                    <>üì∑ {t('createAdForm.step1.addPhotos')}</>
                  )}
                </label>
                
                {formData.photos.length > 0 && (
                  <div className="photo-preview-grid">
                    {formData.photos.map(photo => (
                      <div key={photo.id} className="photo-preview">
                        <img src={photo.url} alt={photo.name} />
                        <button 
                          type="button" 
                          className="remove-photo-btn"
                          onClick={() => removePhoto(photo.id)}
                        >
                          √ó
                        </button>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              {errors.photos && <span className="field-error">{errors.photos}</span>}
            </div>

            <div className="form-actions single">
              <button 
                type="button" 
                className="next-btn" 
                onClick={handleNext}
                disabled={!isStep1Valid()}
              >
                {t('createAdForm.buttons.next')} ‚Üí
              </button>
            </div>
            
            <div className="step-indicator">
              <span className={`step ${currentStep === 1 ? 'active' : currentStep > 1 ? 'completed' : ''}`}>1</span>
              <span className={`step ${currentStep >= 2 ? 'active' : ''}`}>2</span>
            </div>
          </div>
        )}

        {currentStep === 2 && (
          <div className="step-content">
            <div className={`form-group ${errors.country ? 'has-error' : ''}`}>
              <label>{i18n.language.includes('uk') ? '–ö—Ä–∞—ó–Ω–∞' : 'Country'} *</label>
              <CustomSelect
                value={formData.country}
                onChange={(value) => handleInputChange('country', value)}
                options={countries}
                className={errors.country ? 'error' : ''}
              />
              {errors.country && <span className="field-error">{errors.country}</span>}
            </div>

            {formData.country && (
              <div className={`form-group ${errors.city ? 'has-error' : ''}`}>
                <label>{i18n.language.includes('uk') ? '–ú—ñ—Å—Ç–æ' : 'City'} *</label>
                <CustomSelect
                  value={formData.city}
                  onChange={(value) => handleInputChange('city', value)}
                  options={getCities()}
                  className={errors.city ? 'error' : ''}
                />
                {errors.city && <span className="field-error">{errors.city}</span>}
              </div>
            )}

            <div className={`form-group ${errors.address ? 'has-error' : ''}`}>
              <label>{i18n.language.includes('uk') ? '–ê–¥—Ä–µ—Å–∞' : 'Address'} *</label>
              <input
                type="text"
                value={formData.address}
                onChange={(e) => handleInputChange('address', e.target.value)}
                placeholder={i18n.language.includes('uk') ? '–í—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞...' : 'Street, building, apartment...'}
                className={errors.address ? 'input-error' : ''}
                maxLength="200"
              />
              {errors.address && <span className="field-error">{errors.address}</span>}
            </div>

            <div className={`form-group ${errors.details ? 'has-error' : ''}`}>
              <label>{i18n.language.includes('uk') ? '–î–µ—Ç–∞–ª—ñ' : 'Details'} *</label>
              <CustomSelect
                value={formData.details}
                onChange={(value) => handleInputChange('details', value)}
                options={getDetailsOptions()}
                className={errors.details ? 'error' : ''}
              />
              {errors.details && <span className="field-error">{errors.details}</span>}
            </div>

            <div className={`form-group ${errors.price ? 'has-error' : ''}`}>
              <label>{i18n.language.includes('uk') ? '–¶—ñ–Ω–∞' : 'Price'} *</label>
              <div className="price-input-group">
                <input
                  type="number"
                  value={formData.price}
                  onChange={(e) => handleInputChange('price', e.target.value)}
                  placeholder={i18n.language.includes('uk') ? '–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É...' : 'Enter price...'}
                  className={errors.price ? 'input-error' : ''}
                  min="0"
                  step="0.01"
                />
                <CustomSelect
                  value={formData.currency}
                  onChange={(value) => handleInputChange('currency', value)}
                  options={currencies}
                  className="currency-select"
                />
              </div>
              {errors.price && <span className="field-error">{errors.price}</span>}
            </div>

            <div className="contact-section">
              <h4>{i18n.language.includes('uk') ? '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è' : 'Contact Information'}</h4>
              
              <div className={`form-group ${errors.contactPhone ? 'has-error' : ''}`}>
                <label>{i18n.language.includes('uk') ? '–¢–µ–ª–µ—Ñ–æ–Ω' : 'Phone'}</label>
                <input
                  type="tel"
                  value={formData.contactPhone}
                  onChange={(e) => handleInputChange('contactPhone', e.target.value)}
                  placeholder={i18n.language.includes('uk') ? '+380 XX XXX XX XX' : '+1 XXX XXX XXXX'}
                  className={errors.contactPhone ? 'input-error' : ''}
                />
                {errors.contactPhone && <span className="field-error">{errors.contactPhone}</span>}
              </div>
              
              <div className={`form-group ${errors.contactEmail ? 'has-error' : ''}`}>
                <label>{i18n.language.includes('uk') ? 'Email' : 'Email'}</label>
                <input
                  type="email"
                  value={formData.contactEmail}
                  onChange={(e) => handleInputChange('contactEmail', e.target.value)}
                  placeholder={i18n.language.includes('uk') ? 'your@email.com' : 'your@email.com'}
                  className={errors.contactEmail ? 'input-error' : ''}
                />
                {errors.contactEmail && <span className="field-error">{errors.contactEmail}</span>}
              </div>
              
              {errors.contact && <span className="field-error contact-error">{errors.contact}</span>}
            </div>

            <div className="form-actions">
              <button type="button" className="back-btn" onClick={handleBack}>
                ‚Üê {i18n.language.includes('uk') ? '–ù–∞–∑–∞–¥' : 'Back'}
              </button>
              <button 
                type="button" 
                className="submit-btn" 
                onClick={handleNext}
                disabled={!isStep2Valid() || isSubmitting}
              >
                {isSubmitting 
                  ? (i18n.language.includes('uk') ? '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è...' : 'Creating...') 
                  : (i18n.language.includes('uk') ? '–°—Ç–≤–æ—Ä–∏—Ç–∏' : 'Create')
                }
              </button>
            </div>
            
            <div className="step-indicator">
              <span className={`step ${currentStep === 1 ? 'active' : currentStep > 1 ? 'completed' : ''}`}>1</span>
              <span className={`step ${currentStep >= 2 ? 'active' : ''}`}>2</span>
            </div>
          </div>
        )}

        {currentStep === 3 && (
          <div className="step-content success-content">
            <div className="success-icon">‚úÖ</div>
            <h3 className="success-title">
              {i18n.language.includes('uk') ? '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!' : 'Ad created successfully!'}
            </h3>
            <p className="success-text">
              {i18n.language.includes('uk') 
                ? '–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —Ç–∞ –∑\'—è–≤–∏—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—ñ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.' 
                : 'Your ad has been successfully published and will appear on the map shortly.'}
            </p>
            <div className="form-actions single">
              <button type="button" className="next-btn" onClick={onClose}>
                {i18n.language.includes('uk') ? '–ó–∞–∫—Ä–∏—Ç–∏' : 'Close'}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CreateAdForm;