import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import CustomSelect from '../ui/CustomSelect';
import './CreateAdForm.css';

const CreateAdForm = ({ onClose }) => {
  const { t, i18n } = useTranslation();
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    title: '',
    category: '',
    subcategory: '',
    country: '',
    city: '',
    details: '',
    price: ''
  });
  const [errors, setErrors] = useState({});

  const categories = [
    { value: '', label: i18n.language.includes('uk') ? '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é' : 'Select category' },
    { value: 'realty', label: `üè† ${i18n.language.includes('uk') ? '–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å' : 'Real Estate'}` },
    { value: 'transport', label: `üöó ${i18n.language.includes('uk') ? '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç' : 'Transport'}` },
    { value: 'work', label: `üíº ${i18n.language.includes('uk') ? '–†–æ–±–æ—Ç–∞' : 'Work'}` },
    { value: 'services', label: `üîß ${i18n.language.includes('uk') ? '–ü–æ—Å–ª—É–≥–∏' : 'Services'}` },
    { value: 'electronics', label: `üì± ${i18n.language.includes('uk') ? '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞' : 'Electronics'}` },
    { value: 'places', label: `üçΩÔ∏è ${i18n.language.includes('uk') ? '–ó–∞–∫–ª–∞–¥–∏' : 'Places'}` },
    { value: 'entertainment', label: `üéØ ${i18n.language.includes('uk') ? '–†–æ–∑–≤–∞–≥–∏' : 'Entertainment'}` }
  ];

  const getSubcategories = () => {
    const subcategories = [
      { value: '', label: i18n.language.includes('uk') ? '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é' : 'Select subcategory' }
    ];

    if (formData.category === 'realty') {
      subcategories.push(
        { value: 'apartments', label: `üè¢ ${i18n.language.includes('uk') ? '–ö–≤–∞—Ä—Ç–∏—Ä–∏' : 'Apartments'}` },
        { value: 'houses', label: `üè° ${i18n.language.includes('uk') ? '–ë—É–¥–∏–Ω–∫–∏' : 'Houses'}` },
        { value: 'commercial', label: `üè¨ ${i18n.language.includes('uk') ? '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞' : 'Commercial'}` },
        { value: 'land', label: `üåæ ${i18n.language.includes('uk') ? '–ó–µ–º–ª—è' : 'Land'}` }
      );
    } else if (formData.category === 'transport') {
      subcategories.push(
        { value: 'cars', label: `üöô ${i18n.language.includes('uk') ? '–ê–≤—Ç–æ' : 'Cars'}` },
        { value: 'motorcycles', label: `üèçÔ∏è ${i18n.language.includes('uk') ? '–ú–æ—Ç–æ' : 'Motorcycles'}` },
        { value: 'trucks', label: `üöõ ${i18n.language.includes('uk') ? '–í–∞–Ω—Ç–∞–∂—ñ–≤–∫–∏' : 'Trucks'}` },
        { value: 'boats', label: `‚õµ ${i18n.language.includes('uk') ? '–í–æ–¥–Ω–∏–π' : 'Boats'}` }
      );
    } else if (formData.category === 'work') {
      subcategories.push(
        { value: 'vacancies', label: `üìã ${i18n.language.includes('uk') ? '–í–∞–∫–∞–Ω—Å—ñ—ó' : 'Vacancies'}` },
        { value: 'resumes', label: `üìÑ ${i18n.language.includes('uk') ? '–†–µ–∑—é–º–µ' : 'Resumes'}` },
        { value: 'freelance', label: `üíª ${i18n.language.includes('uk') ? '–§—Ä—ñ–ª–∞–Ω—Å' : 'Freelance'}` }
      );
    } else if (formData.category === 'services') {
      subcategories.push(
        { value: 'construction', label: `üî® ${i18n.language.includes('uk') ? '–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ' : 'Construction'}` },
        { value: 'household', label: `üè† ${i18n.language.includes('uk') ? '–ü–æ–±—É—Ç–æ–≤—ñ' : 'Household'}` },
        { value: 'education', label: `üìö ${i18n.language.includes('uk') ? '–û—Å–≤—ñ—Ç–∞' : 'Education'}` },
        { value: 'beauty', label: `üíÑ ${i18n.language.includes('uk') ? '–ö—Ä–∞—Å–∞' : 'Beauty'}` }
      );
    } else if (formData.category === 'electronics') {
      subcategories.push(
        { value: 'smartphones', label: `üì± ${i18n.language.includes('uk') ? '–¢–µ–ª–µ—Ñ–æ–Ω–∏' : 'Smartphones'}` },
        { value: 'computers', label: `üíª ${i18n.language.includes('uk') ? '–ö–æ–º–ø\'—é—Ç–µ—Ä–∏' : 'Computers'}` },
        { value: 'appliances', label: `üîå ${i18n.language.includes('uk') ? '–¢–µ—Ö–Ω—ñ–∫–∞' : 'Appliances'}` }
      );
    } else if (formData.category === 'places') {
      subcategories.push(
        { value: 'cafe', label: `‚òï ${i18n.language.includes('uk') ? '–ö–∞—Ñ–µ' : 'Cafe'}` },
        { value: 'restaurant', label: `üçΩÔ∏è ${i18n.language.includes('uk') ? '–†–µ—Å—Ç–æ—Ä–∞–Ω–∏' : 'Restaurants'}` },
        { value: 'hotel', label: `üè® ${i18n.language.includes('uk') ? '–ì–æ—Ç–µ–ª—ñ' : 'Hotels'}` }
      );
    } else if (formData.category === 'entertainment') {
      subcategories.push(
        { value: 'park', label: `üå≥ ${i18n.language.includes('uk') ? '–ü–∞—Ä–∫–∏' : 'Parks'}` },
        { value: 'museum', label: `üèõÔ∏è ${i18n.language.includes('uk') ? '–ú—É–∑–µ—ó' : 'Museums'}` },
        { value: 'shop', label: `üõçÔ∏è ${i18n.language.includes('uk') ? '–ú–∞–≥–∞–∑–∏–Ω–∏' : 'Shops'}` }
      );
    }

    return subcategories;
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ 
      ...prev, 
      [field]: value,
      ...(field === 'category' ? { subcategory: '' } : {}),
      ...(field === 'country' ? { city: '' } : {})
    }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
  };

  const validateStep1 = () => {
    const newErrors = {};
    
    if (!formData.title.trim()) {
      newErrors.title = i18n.language.includes('uk') ? '–ù–∞–∑–≤–∞ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é' : 'Title is required';
    }
    if (!formData.category) {
      newErrors.category = i18n.language.includes('uk') ? '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é' : 'Category is required';
    }
    if (!formData.subcategory) {
      newErrors.subcategory = i18n.language.includes('uk') ? '–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é' : 'Subcategory is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const validateStep2 = () => {
    const newErrors = {};
    
    if (!formData.country) {
      newErrors.country = i18n.language.includes('uk') ? '–ö—Ä–∞—ó–Ω–∞ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é' : 'Country is required';
    }
    if (!formData.city) {
      newErrors.city = i18n.language.includes('uk') ? '–ú—ñ—Å—Ç–æ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º' : 'City is required';
    }
    if (!formData.details) {
      newErrors.details = i18n.language.includes('uk') ? '–î–µ—Ç–∞–ª—ñ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏' : 'Details are required';
    }
    if (!formData.price.trim()) {
      newErrors.price = i18n.language.includes('uk') ? '–¶—ñ–Ω–∞ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ—é' : 'Price is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (currentStep === 1 && validateStep1()) {
      setCurrentStep(2);
    } else if (currentStep === 2 && validateStep2()) {
      // Submit form
      console.log('Form submitted:', formData);
      setCurrentStep(3);
    }
  };

  const handleBack = () => {
    setCurrentStep(1);
  };

  const isStep1Valid = () => {
    return formData.title.trim() && formData.category && formData.subcategory;
  };

  const isStep2Valid = () => {
    return formData.country && formData.city && formData.details && formData.price.trim();
  };

  const countries = [
    { value: '', label: i18n.language.includes('uk') ? '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É' : 'Select country' },
    { value: 'usa', label: `üá∫üá∏ ${i18n.language.includes('uk') ? '–°–®–ê' : 'USA'}` },
    { value: 'ukraine', label: `üá∫üá¶ ${i18n.language.includes('uk') ? '–£–∫—Ä–∞—ó–Ω–∞' : 'Ukraine'}` }
  ];

  const getCities = () => {
    const cities = [
      { value: '', label: i18n.language.includes('uk') ? '–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ' : 'Select city' }
    ];

    if (formData.country === 'usa') {
      cities.push(
        { value: 'new-york', label: 'New York' },
        { value: 'los-angeles', label: 'Los Angeles' },
        { value: 'chicago', label: 'Chicago' },
        { value: 'houston', label: 'Houston' },
        { value: 'miami', label: 'Miami' }
      );
    } else if (formData.country === 'ukraine') {
      cities.push(
        { value: 'kyiv', label: i18n.language.includes('uk') ? '–ö–∏—ó–≤' : 'Kyiv' },
        { value: 'kharkiv', label: i18n.language.includes('uk') ? '–•–∞—Ä–∫—ñ–≤' : 'Kharkiv' },
        { value: 'odesa', label: i18n.language.includes('uk') ? '–û–¥–µ—Å–∞' : 'Odesa' },
        { value: 'dnipro', label: i18n.language.includes('uk') ? '–î–Ω—ñ–ø—Ä–æ' : 'Dnipro' },
        { value: 'lviv', label: i18n.language.includes('uk') ? '–õ—å–≤—ñ–≤' : 'Lviv' }
      );
    }

    return cities;
  };

  const getDetailsOptions = () => {
    const details = [
      { value: '', label: i18n.language.includes('uk') ? '–û–±–µ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ' : 'Select details' }
    ];

    if (formData.subcategory === 'apartments') {
      details.push(
        { value: '1-room', label: i18n.language.includes('uk') ? '1 –∫—ñ–º–Ω–∞—Ç–∞' : '1 room' },
        { value: '2-room', label: i18n.language.includes('uk') ? '2 –∫—ñ–º–Ω–∞—Ç–∏' : '2 rooms' },
        { value: '3-room', label: i18n.language.includes('uk') ? '3 –∫—ñ–º–Ω–∞—Ç–∏' : '3 rooms' },
        { value: '4-room', label: i18n.language.includes('uk') ? '4+ –∫—ñ–º–Ω–∞—Ç' : '4+ rooms' }
      );
    } else if (formData.subcategory === 'cars') {
      details.push(
        { value: 'sedan', label: i18n.language.includes('uk') ? '–°–µ–¥–∞–Ω' : 'Sedan' },
        { value: 'suv', label: i18n.language.includes('uk') ? '–ü–æ–∑–∞—à–ª—è—Ö–æ–≤–∏–∫' : 'SUV' },
        { value: 'hatchback', label: i18n.language.includes('uk') ? '–•–µ—Ç—á–±–µ–∫' : 'Hatchback' },
        { value: 'coupe', label: i18n.language.includes('uk') ? '–ö—É–ø–µ' : 'Coupe' }
      );
    } else if (formData.subcategory === 'vacancies') {
      details.push(
        { value: 'full-time', label: i18n.language.includes('uk') ? '–ü–æ–≤–Ω–∏–π –¥–µ–Ω—å' : 'Full-time' },
        { value: 'part-time', label: i18n.language.includes('uk') ? '–ù–µ–ø–æ–≤–Ω–∏–π –¥–µ–Ω—å' : 'Part-time' },
        { value: 'remote', label: i18n.language.includes('uk') ? '–í—ñ–¥–¥–∞–ª–µ–Ω–æ' : 'Remote' },
        { value: 'contract', label: i18n.language.includes('uk') ? '–ö–æ–Ω—Ç—Ä–∞–∫—Ç' : 'Contract' }
      );
    } else if (formData.subcategory === 'smartphones') {
      details.push(
        { value: 'new', label: i18n.language.includes('uk') ? '–ù–æ–≤–∏–π' : 'New' },
        { value: 'used', label: i18n.language.includes('uk') ? '–í–∂–∏–≤–∞–Ω–∏–π' : 'Used' },
        { value: 'refurbished', label: i18n.language.includes('uk') ? '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–∏–π' : 'Refurbished' }
      );
    } else {
      details.push(
        { value: 'excellent', label: i18n.language.includes('uk') ? '–í—ñ–¥–º—ñ–Ω–Ω–∏–π —Å—Ç–∞–Ω' : 'Excellent condition' },
        { value: 'good', label: i18n.language.includes('uk') ? '–•–æ—Ä–æ—à–∏–π —Å—Ç–∞–Ω' : 'Good condition' },
        { value: 'fair', label: i18n.language.includes('uk') ? '–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π —Å—Ç–∞–Ω' : 'Fair condition' }
      );
    }

    return details;
  };

  return (
    <div className="create-ad-overlay">
      <div className="create-ad-form">
        <div className="form-header">
          <h3>{i18n.language.includes('uk') ? '–°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è' : 'Create Ad'}</h3>
          <button className="close-btn" onClick={onClose}>√ó</button>
        </div>

        {currentStep === 1 && (
          <div className="step-content">
            <div className="form-group">
              <label>{i18n.language.includes('uk') ? '–ù–∞–∑–≤–∞' : 'Title'} *</label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                placeholder={i18n.language.includes('uk') ? '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è...' : 'Enter ad title...'}
                className={errors.title ? 'error' : ''}
              />
              {errors.title && <span className="error-message">{errors.title}</span>}
            </div>

            <div className="form-group">
              <label>{i18n.language.includes('uk') ? '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è' : 'Category'} *</label>
              <CustomSelect
                value={formData.category}
                onChange={(value) => handleInputChange('category', value)}
                options={categories}
                className={errors.category ? 'error' : ''}
              />
              {errors.category && <span className="error-message">{errors.category}</span>}
            </div>

            {formData.category && (
              <div className="form-group">
                <label>{i18n.language.includes('uk') ? '–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è' : 'Subcategory'} *</label>
                <CustomSelect
                  value={formData.subcategory}
                  onChange={(value) => handleInputChange('subcategory', value)}
                  options={getSubcategories()}
                  className={errors.subcategory ? 'error' : ''}
                />
                {errors.subcategory && <span className="error-message">{errors.subcategory}</span>}
              </div>
            )}

            <div className="form-actions single">
              <button 
                type="button" 
                className="next-btn" 
                onClick={handleNext}
                disabled={!isStep1Valid()}
              >
                {i18n.language.includes('uk') ? '–î–∞–ª—ñ' : 'Next'} ‚Üí
              </button>
            </div>
            
            <div className="step-indicator">
              <span className={`step ${currentStep === 1 ? 'active' : currentStep > 1 ? 'completed' : ''}`}>1</span>
              <span className={`step ${currentStep >= 2 ? 'active' : ''}`}>2</span>
            </div>
          </div>
        )}

        {currentStep === 2 && (
          <div className="step-content">
            <div className="form-group">
              <label>{i18n.language.includes('uk') ? '–ö—Ä–∞—ó–Ω–∞' : 'Country'} *</label>
              <CustomSelect
                value={formData.country}
                onChange={(value) => handleInputChange('country', value)}
                options={countries}
                className={errors.country ? 'error' : ''}
              />
              {errors.country && <span className="field-error">{errors.country}</span>}
            </div>

            {formData.country && (
              <div className="form-group">
                <label>{i18n.language.includes('uk') ? '–ú—ñ—Å—Ç–æ' : 'City'} *</label>
                <CustomSelect
                  value={formData.city}
                  onChange={(value) => handleInputChange('city', value)}
                  options={getCities()}
                  className={errors.city ? 'error' : ''}
                />
                {errors.city && <span className="field-error">{errors.city}</span>}
              </div>
            )}

            <div className="form-group">
              <label>{i18n.language.includes('uk') ? '–î–µ—Ç–∞–ª—ñ' : 'Details'} *</label>
              <CustomSelect
                value={formData.details}
                onChange={(value) => handleInputChange('details', value)}
                options={getDetailsOptions()}
                className={errors.details ? 'error' : ''}
              />
              {errors.details && <span className="field-error">{errors.details}</span>}
            </div>

            <div className="form-group">
              <label>{i18n.language.includes('uk') ? '–¶—ñ–Ω–∞' : 'Price'} *</label>
              <input
                type="text"
                value={formData.price}
                onChange={(e) => handleInputChange('price', e.target.value)}
                placeholder={i18n.language.includes('uk') ? '–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É...' : 'Enter price...'}
                className={errors.price ? 'input-error' : ''}
              />
              {errors.price && <span className="field-error">{errors.price}</span>}
            </div>

            <div className="form-actions">
              <button type="button" className="back-btn" onClick={handleBack}>
                ‚Üê {i18n.language.includes('uk') ? '–ù–∞–∑–∞–¥' : 'Back'}
              </button>
              <button 
                type="button" 
                className="next-btn" 
                onClick={handleNext}
                disabled={!isStep2Valid()}
              >
                {i18n.language.includes('uk') ? '–°—Ç–≤–æ—Ä–∏—Ç–∏' : 'Create'}
              </button>
            </div>
            
            <div className="step-indicator">
              <span className={`step ${currentStep === 1 ? 'active' : currentStep > 1 ? 'completed' : ''}`}>1</span>
              <span className={`step ${currentStep >= 2 ? 'active' : ''}`}>2</span>
            </div>
          </div>
        )}

        {currentStep === 3 && (
          <div className="step-content success-content">
            <div className="success-icon">‚úÖ</div>
            <h3 className="success-title">
              {i18n.language.includes('uk') ? '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!' : 'Ad created successfully!'}
            </h3>
            <p className="success-text">
              {i18n.language.includes('uk') 
                ? '–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —Ç–∞ –∑\'—è–≤–∏—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—ñ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.' 
                : 'Your ad has been successfully published and will appear on the map shortly.'}
            </p>
            <div className="form-actions single">
              <button type="button" className="next-btn" onClick={onClose}>
                {i18n.language.includes('uk') ? '–ó–∞–∫—Ä–∏—Ç–∏' : 'Close'}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CreateAdForm;