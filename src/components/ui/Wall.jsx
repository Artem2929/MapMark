import React, { useState, useRef, useEffect } from 'react';
import { wallService } from '../../services/wallService';
import './Wall.css';

const Wall = ({ userId, isOwnProfile, user }) => {
  const [loading, setLoading] = useState(false);
  const [postText, setPostText] = useState('');
  const [selectedPhotos, setSelectedPhotos] = useState([]);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [showUserSuggestions, setShowUserSuggestions] = useState(false);
  const [userSuggestions, setUserSuggestions] = useState([]);
  const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(0);
  const [editingPost, setEditingPost] = useState(null);
  const [editText, setEditText] = useState('');
  const [showPostMenu, setShowPostMenu] = useState(null);
  const [showComments, setShowComments] = useState({});
  const [commentText, setCommentText] = useState({});
  const textareaRef = useRef(null);
  
  const mockUsers = [
    { id: 1, name: '–ê—Ä—Ç–µ–º –ü–æ–ª—ñ—â—É–∫', username: 'artem' },
    { id: 2, name: '–ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞', username: 'maria' },
    { id: 3, name: '–û–ª–µ–∫—Å—ñ–π –ü–µ—Ç—Ä–æ–≤', username: 'alex' },
    { id: 4, name: '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞', username: 'anna' },
    { id: 5, name: '–î–º–∏—Ç—Ä–æ –ö–æ–≤–∞–ª—å', username: 'dmitro' }
  ];
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    if (userId) {
      loadPosts();
    }
  }, [userId]);

  const loadPosts = async () => {
    try {
      setLoading(true);
      const posts = await wallService.getPosts(userId);
      setPosts(posts);
    } catch (error) {
      console.error('Error loading posts:', error);
      setPosts([]);
    } finally {
      setLoading(false);
    }
  };

  const handleTextChange = (e) => {
    const value = e.target.value;
    const cursorPos = e.target.selectionStart;
    setPostText(value);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î @ –ø–µ—Ä–µ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
    const textBeforeCursor = value.slice(0, cursorPos);
    const atIndex = textBeforeCursor.lastIndexOf('@');
    
    if (atIndex !== -1) {
      const searchTerm = textBeforeCursor.slice(atIndex + 1);
      if (searchTerm.length >= 0 && !searchTerm.includes(' ')) {
        const filtered = mockUsers.filter(user => 
          user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          user.username.toLowerCase().includes(searchTerm.toLowerCase())
        );
        setUserSuggestions(filtered);
        setShowUserSuggestions(filtered.length > 0);
        setSelectedSuggestionIndex(0);
      } else {
        setShowUserSuggestions(false);
      }
    } else {
      setShowUserSuggestions(false);
    }
  };

  // –ê–≤—Ç–æ-—Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è textarea
  React.useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';
    }
  }, [postText]);

  const handleEmojiSelect = (emoji) => {
    const textarea = textareaRef.current;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const newText = postText.slice(0, start) + emoji + postText.slice(end);
    setPostText(newText);
    setShowEmojiPicker(false);
    
    setTimeout(() => {
      textarea.focus();
      textarea.setSelectionRange(start + emoji.length, start + emoji.length);
    }, 0);
  };
  
  const handleUserSelect = (user) => {
    const textarea = textareaRef.current;
    const cursorPos = textarea.selectionStart;
    const textBeforeCursor = postText.slice(0, cursorPos);
    const atIndex = textBeforeCursor.lastIndexOf('@');
    
    if (atIndex !== -1) {
      const newText = postText.slice(0, atIndex) + `@${user.username} ` + postText.slice(cursorPos);
      setPostText(newText);
      setShowUserSuggestions(false);
      
      setTimeout(() => {
        textarea.focus();
        const newCursorPos = atIndex + user.username.length + 2;
        textarea.setSelectionRange(newCursorPos, newCursorPos);
      }, 0);
    }
  };
  
  const handleKeyDown = (e) => {
    if (showUserSuggestions) {
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        setSelectedSuggestionIndex(prev => 
          prev < userSuggestions.length - 1 ? prev + 1 : 0
        );
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        setSelectedSuggestionIndex(prev => 
          prev > 0 ? prev - 1 : userSuggestions.length - 1
        );
      } else if (e.key === 'Enter') {
        e.preventDefault();
        handleUserSelect(userSuggestions[selectedSuggestionIndex]);
      } else if (e.key === 'Escape') {
        setShowUserSuggestions(false);
      }
    }
  };
  
  const renderPostContent = (content) => {
    return content.replace(/@(\w+)/g, '<span class="user-tag">@$1</span>');
  };

  const handlePhotoSelect = (e) => {
    const files = Array.from(e.target.files).slice(0, 3);
    const photoUrls = files.map(file => URL.createObjectURL(file));
    setSelectedPhotos(photoUrls);
  };
  
  const handleFileSelect = (e) => {
    const files = Array.from(e.target.files).slice(0, 5);
    const fileData = files.map(file => ({
      name: file.name,
      size: file.size,
      type: file.type,
      url: URL.createObjectURL(file)
    }));
    setSelectedFiles(fileData);
  };
  
  const removeFile = (index) => {
    setSelectedFiles(selectedFiles.filter((_, i) => i !== index));
  };
  
  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };
  
  const getFileIcon = (type) => {
    if (type.startsWith('image/')) return 'üñºÔ∏è';
    if (type.startsWith('video/')) return 'üé•';
    if (type.includes('pdf')) return 'üìÑ';
    if (type.includes('word') || type.includes('document')) return 'üìÑ';
    if (type.includes('excel') || type.includes('sheet')) return 'üìà';
    if (type.includes('zip') || type.includes('rar')) return 'üóÑ';
    return 'üìÅ';
  };

  const handleCancel = () => {
    setPostText('');
    setSelectedPhotos([]);
    setSelectedFiles([]);
  };

  const handlePublish = async (e) => {
    e.preventDefault();
    if (!postText.trim() || !userId) return;

    try {
      setLoading(true);
      const postData = {
        content: postText,
        images: selectedPhotos,
        files: selectedFiles
      };
      
      const result = await wallService.createPost(userId, postData);
      if (result.success) {
        await loadPosts();
        handleCancel();
      }
    } catch (error) {
      console.error('Error creating post:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleLike = async (postId) => {
    try {
      const currentUserId = localStorage.getItem('userId');
      const result = await wallService.toggleLike(postId, currentUserId);
      if (result.success) {
        await loadPosts();
      }
    } catch (error) {
      console.error('Error toggling like:', error);
    }
  };
  
  const handleDislike = async (postId) => {
    try {
      const currentUserId = localStorage.getItem('userId');
      const result = await wallService.toggleDislike(postId, currentUserId);
      if (result.success) {
        await loadPosts();
      }
    } catch (error) {
      console.error('Error toggling dislike:', error);
    }
  };
  
  const handleEditPost = (post) => {
    setEditingPost(post.id);
    setEditText(post.content);
    setShowPostMenu(null);
  };
  
  const handleSaveEdit = (postId) => {
    setPosts(posts.map(post => 
      post.id === postId ? { ...post, content: editText } : post
    ));
    setEditingPost(null);
    setEditText('');
  };
  
  const handleCancelEdit = () => {
    setEditingPost(null);
    setEditText('');
  };
  
  const handleDeletePost = async (postId) => {
    try {
      const currentUserId = localStorage.getItem('userId');
      const result = await wallService.deletePost(postId, currentUserId);
      if (result.success) {
        await loadPosts();
      }
    } catch (error) {
      console.error('Error deleting post:', error);
    }
    setShowPostMenu(null);
  };
  
  const handleHidePost = (postId) => {
    setPosts(posts.map(post => 
      post.id === postId ? { ...post, hidden: true } : post
    ));
    setShowPostMenu(null);
  };
  
  const handleReportPost = (postId) => {
    alert('–°–∫–∞—Ä–≥—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
    setShowPostMenu(null);
  };
  
  const toggleComments = (postId) => {
    setShowComments(prev => ({
      ...prev,
      [postId]: !prev[postId]
    }));
  };
  
  const handleCommentSubmit = async (postId) => {
    const text = commentText[postId]?.trim();
    if (!text) return;
    
    try {
      const currentUserId = localStorage.getItem('userId');
      const result = await wallService.addComment(postId, currentUserId, text);
      if (result.success) {
        await loadPosts();
        setCommentText(prev => ({ ...prev, [postId]: '' }));
      }
    } catch (error) {
      console.error('Error adding comment:', error);
    }
  };

  return (
    <div className="wall-container">
      <div className="wall-header">
        <h3>–°—Ç—ñ–Ω–∞</h3>
        <span className="posts-count">{posts.length} –∑–∞–ø–∏—Å–∏</span>
      </div>

      {isOwnProfile && (
        <div className="post-creator">
          <form onSubmit={handlePublish}>
            <div className="creator-header">
              <div className="creator-avatar">
                {user?.avatar ? (
                  <img 
                    src={user.avatar.startsWith('data:') || user.avatar.startsWith('http') 
                      ? user.avatar 
                      : `http://localhost:3000${user.avatar}`} 
                    alt="–ê–≤–∞—Ç–∞—Ä" 
                  />
                ) : (
                  <div className="avatar-placeholder">{user?.name?.charAt(0) || 'U'}</div>
                )}
              </div>
              <div className="input-container">
                <textarea
                  ref={textareaRef}
                  value={postText}
                  onChange={handleTextChange}
                  onKeyDown={handleKeyDown}
                  placeholder="–©–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?"
                  className="creator-input"
                  rows="2"
                />
                <div 
                  id="tag-suggestions" 
                  className="user-suggestions"
                  style={{ display: showUserSuggestions ? 'block' : 'none' }}
                >
                  {userSuggestions.map((user, index) => (
                    <div
                      key={user.id}
                      className={`suggestion-item ${index === selectedSuggestionIndex ? 'selected' : ''}`}
                      onClick={() => handleUserSelect(user)}
                    >
                      <div className="suggestion-avatar">{user.name[0]}</div>
                      <div className="suggestion-info">
                        <div className="suggestion-name">{user.name}</div>
                        <div className="suggestion-username">@{user.username}</div>
                      </div>
                    </div>
                  ))}
                </div>
                <span className={`char-counter ${
                  postText.length > 1500 ? 'error' : 
                  postText.length > 1200 ? 'warning' : ''
                }`}>
                  {postText.length}/1500
                </span>
              </div>
            </div>

            <div className="creator-actions">
              <div className="creator-tools">
                <label className="tool-btn" title="–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ">
                  üì∑
                  <input
                    accept="image/*"
                    multiple
                    type="file"
                    hidden
                    onChange={handlePhotoSelect}
                  />
                </label>

                <button 
                  type="button" 
                  className="tool-btn" 
                  title="–ï–º–æ–¥–∂—ñ"
                  onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                >
                  üòä
                </button>
              </div>
              <div className="creator-buttons">
                <button 
                  type="button" 
                  className="cancel-btn" 
                  onClick={handleCancel}
                >
                  –°–∫–∞—Å—É–≤–∞—Ç–∏
                </button>
                <button 
                  type="submit" 
                  className="publish-btn" 
                  disabled={!postText.trim() || postText.length > 1500}
                >
                  –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏
                </button>
              </div>
            </div>

            {showEmojiPicker && (
              <div className="emoji-picker">
                {[
                  'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá',
                  'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö',
                  'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©',
                  'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£',
                  'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨',
                  'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó',
                  'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ',
                  'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê',
                  'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üòà',
                  'üëø', 'üëπ', 'üë∫', 'ü§°', 'üí©', 'üëª', 'üíÄ', '‚ò†Ô∏è', 'üëΩ', 'üëæ',
                  'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø',
                  'üòæ', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è',
                  'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è',
                  'üëç', 'üëé', 'üëä', '‚úä', 'ü§õ', 'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤',
                  'ü§ù', 'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂',
                  'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è',
                  'üëÖ', 'üëÑ', 'üíã', 'ü©∏', '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú',
                  'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ',
                  'üíò', 'üíù', 'üíü', '‚òÆÔ∏è', '‚úùÔ∏è', '‚ò™Ô∏è', 'üïâÔ∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ',
                  'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê', '‚õé', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå',
                  '‚ôç', '‚ôé', '‚ôè', '‚ôê', '‚ôë', '‚ôí', '‚ôì', 'üÜî', '‚öõÔ∏è', 'üâë',
                  '‚ò¢Ô∏è', '‚ò£Ô∏è', 'üì¥', 'üì≥', 'üà∂', 'üàö', 'üà∏', 'üà∫', 'üà∑Ô∏è', '‚ú¥Ô∏è',
                  'üÜö', 'üíÆ', 'üâê', '„äôÔ∏è', '„äóÔ∏è', 'üà¥', 'üàµ', 'üàπ', 'üà≤', 'üÖ∞Ô∏è',
                  'üÖ±Ô∏è', 'üÜé', 'üÜë', 'üÖæÔ∏è', 'üÜò', '‚ùå', '‚≠ï', 'üõë', '‚õî', 'üìõ',
                  'üö´', 'üíØ', 'üí¢', '‚ô®Ô∏è', 'üö∑', 'üöØ', 'üö≥', 'üö±', 'üîû', 'üìµ',
                  'üö≠', '‚ùó', '‚ùï', '‚ùì', '‚ùî', '‚ÄºÔ∏è', '‚ÅâÔ∏è', 'üîÖ', 'üîÜ', '„ÄΩÔ∏è',
                  '‚ö†Ô∏è', 'üö∏', 'üî±', '‚öúÔ∏è', 'üî∞', '‚ôªÔ∏è', '‚úÖ', 'üàØ', 'üíπ', '‚ùáÔ∏è',
                  '‚ú≥Ô∏è', '‚ùé', 'üåê', 'üí†', '‚ìÇÔ∏è', 'üåÄ', 'üí§', 'üèß', 'üöæ', '‚ôø',
                  'üÖøÔ∏è', 'üà≥', 'üàÇÔ∏è', 'üõÇ', 'üõÉ', 'üõÑ', 'üõÖ', 'üöπ', 'üö∫', 'üöº',
                  '‚ößÔ∏è', 'üöª', 'üöÆ', 'üé¶', 'üì∂', 'üàÅ', 'üî£', '‚ÑπÔ∏è', 'üî§', 'üî°',
                  'üî†', 'üÜñ', 'üÜó', 'üÜô', 'üÜí', 'üÜï', 'üÜì', '0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£',
                  '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü', 'üî¢',
                  '#Ô∏è‚É£', '*Ô∏è‚É£', '‚èèÔ∏è', '‚ñ∂Ô∏è', '‚è∏Ô∏è', '‚èØÔ∏è', '‚èπÔ∏è', '‚è∫Ô∏è', '‚è≠Ô∏è', '‚èÆÔ∏è',
                  '‚è©', '‚è™', '‚è´', '‚è¨', '‚óÄÔ∏è', 'üîº', 'üîΩ', '‚û°Ô∏è', '‚¨ÖÔ∏è', '‚¨ÜÔ∏è',
                  '‚¨áÔ∏è', '‚ÜóÔ∏è', '‚ÜòÔ∏è', '‚ÜôÔ∏è', '‚ÜñÔ∏è', '‚ÜïÔ∏è', '‚ÜîÔ∏è', '‚Ü™Ô∏è', '‚Ü©Ô∏è', '‚§¥Ô∏è',
                  '‚§µÔ∏è', 'üîÄ', 'üîÅ', 'üîÇ', 'üîÑ', 'üîÉ', 'üéµ', 'üé∂', '‚ûï', '‚ûñ',
                  '‚ûó', '‚úñÔ∏è', '‚ôæÔ∏è', 'üí≤', 'üí±', '‚Ñ¢Ô∏è', '¬©Ô∏è', '¬ÆÔ∏è', '„Ä∞Ô∏è', '‚û∞',
                  '‚ûø', 'üîö', 'üîô', 'üîõ', 'üîù', 'üîú', '‚úîÔ∏è', '‚òëÔ∏è', 'üîò', 'üî¥',
                  'üü†', 'üü°', 'üü¢', 'üîµ', 'üü£', '‚ö´', '‚ö™', 'üü§', 'üî∫', 'üîª',
                  'üî∏', 'üîπ', 'üî∂', 'üî∑', 'üî≥', 'üî≤', '‚ñ™Ô∏è', '‚ñ´Ô∏è', '‚óæ', '‚óΩ',
                  '‚óºÔ∏è', '‚óªÔ∏è', 'üü•', 'üüß', 'üü®', 'üü©', 'üü¶', 'üü™', '‚¨õ', '‚¨ú',
                  'üü´', 'üîà', 'üîá', 'üîâ', 'üîä', 'üîî', 'üîï', 'üì£', 'üì¢', 'üëÅÔ∏è‚Äçüó®Ô∏è',
                  'üí¨', 'üí≠', 'üóØÔ∏è', '‚ô†Ô∏è', '‚ô£Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', 'üÉè', 'üé¥', 'üÄÑ',
                  'üïê', 'üïë', 'üïí', 'üïì', 'üïî', 'üïï', 'üïñ', 'üïó', 'üïò', 'üïô',
                  'üïö', 'üïõ', 'üïú', 'üïù', 'üïû', 'üïü', 'üï†', 'üï°', 'üï¢', 'üï£',
                  'üï§', 'üï•', 'üï¶', 'üïß', 'üè≥Ô∏è', 'üè¥', 'üèÅ', 'üö©', 'üè≥Ô∏è‚Äçüåà', 'üè≥Ô∏è‚Äç‚ößÔ∏è',
                  'üè¥‚Äç‚ò†Ô∏è', 'üá¶üá´', 'üá¶üáΩ', 'üá¶üá±', 'üá©üáø', 'üá¶üá∏', 'üá¶üá©', 'üá¶üá¥', 'üá¶üáÆ', 'üá¶üá∂', 'üá¶üá¨',
                  'üá¶üá∑', 'üá¶üá≤', 'üá¶üáº', 'üá¶üá∫', 'üá¶üáπ', 'üá¶üáø', 'üáßüá∏', 'üáßüá≠', 'üáßüá©', 'üáßüáß',
                  'üáßüáæ', 'üáßüá™', 'üáßüáø', 'üáßüáØ', 'üáßüá≤', 'üáßüáπ', 'üáßüá¥', 'üáßüá¶', 'üáßüáº', 'üáßüá∑',
                  'üáÆüá¥', 'üáªüá¨', 'üáßüá≥', 'üáßüá¨', 'üáßüá´', 'üáßüáÆ', 'üá∞üá≠', 'üá®üá≤', 'üá®üá¶', 'üáÆüá®',
                  'üá®üáª', 'üáßüá∂', 'üá∞üáæ', 'üá®üá´', 'üáπüá©', 'üá®üá±', 'üá®üá≥', 'üá®üáΩ', 'üá®üá®', 'üá®üá¥',
                  'üá∞üá≤', 'üá®üá¨', 'üá®üá©', 'üá®üá∞', 'üá®üá∑', 'üá®üáÆ', 'üá≠üá∑', 'üá®üá∫', 'üá®üáº', 'üá®üáæ',
                  'üá®üáø', 'üá©üá∞', 'üá©üáØ', 'üá©üá≤', 'üá©üá¥', 'üá™üá®', 'üá™üá¨', 'üá∏üáª', 'üá¨üá∂', 'üá™üá∑',
                  'üá™üá™', 'üá™üáπ', 'üá™üá∫', 'üá´üá∞', 'üá´üá¥', 'üá´üáØ', 'üá´üáÆ', 'üá´üá∑', 'üá¨üá´', 'üáµüá´',
                  'üáπüá´', 'üá¨üá¶', 'üá¨üá≤', 'üá¨üá™', 'üá©üá™', 'üá¨üá≠', 'üá¨üáÆ', 'üá¨üá∑', 'üá¨üá±', 'üá¨üá©',
                  'üá¨üáµ', 'üá¨üá∫', 'üá¨üáπ', 'üá¨üá¨', 'üá¨üá≥', 'üá¨üáº', 'üá¨üáæ', 'üá≠üáπ', 'üá≠üá≥', 'üá≠üá∞',
                  'üá≠üá∫', 'üáÆüá∏', 'üáÆüá≥', 'üáÆüá©', 'üáÆüá∑', 'üáÆüá∂', 'üáÆüá™', 'üáÆüá≤', 'üáÆüá±', 'üáÆüáπ',
                  'üáØüá≤', 'üáØüáµ', 'üéå', 'üáØüá™', 'üáØüá¥', 'üá∞üáø', 'üá∞üá™', 'üá∞üáÆ', 'üáΩüá∞', 'üá∞üáº',
                  'üá∞üá¨', 'üá±üá¶', 'üá±üáª', 'üá±üáß', 'üá±üá∏', 'üá±üá∑', 'üá±üáæ', 'üá±üáÆ', 'üá±üáπ', 'üá±üá∫',
                  'üá≤üá¥', 'üá≤üá∞', 'üá≤üá¨', 'üá≤üáº', 'üá≤üáæ', 'üá≤üáª', 'üá≤üá±', 'üá≤üáπ', 'üá≤üá≠', 'üá≤üá∂',
                  'üá≤üá∑', 'üá≤üá∫', 'üáæüáπ', 'üá≤üáΩ', 'üá´üá≤', 'üá≤üá©', 'üá≤üá®', 'üá≤üá≥', 'üá≤üá™', 'üá≤üá∏',
                  'üá≤üá¶', 'üá≤üáø', 'üá≤üá≤', 'üá≥üá¶', 'üá≥üá∑', 'üá≥üáµ', 'üá≥üá±', 'üá≥üá®', 'üá≥üáø', 'üá≥üáÆ',
                  'üá≥üá™', 'üá≥üá¨', 'üá≥üá∫', 'üá≥üá´', 'üá∞üáµ', 'üá≤üáµ', 'üá≥üá¥', 'üá¥üá≤', 'üáµüá∞', 'üáµüáº',
                  'üáµüá∏', 'üáµüá¶', 'üáµüá¨', 'üáµüáæ', 'üáµüá™', 'üáµüá≠', 'üáµüá≥', 'üáµüá±', 'üáµüáπ', 'üáµüá∑',
                  'üá∂üá¶', 'üá∑üá™', 'üá∑üá¥', 'üá∑üá∫', 'üá∑üáº', 'üáºüá∏', 'üá∏üá≤', 'üá∏üáπ', 'üá∏üá¶', 'üá∏üá≥',
                  'üá∑üá∏', 'üá∏üá®', 'üá∏üá±', 'üá∏üá¨', 'üá∏üáΩ', 'üá∏üá∞', 'üá∏üáÆ', 'üá¨üá∏', 'üá∏üáß', 'üá∏üá¥',
                  'üáøüá¶', 'üá∞üá∑', 'üá∏üá∏', 'üá™üá∏', 'üá±üá∞', 'üáßüá±', 'üá∏üá≠', 'üá∞üá≥', 'üá±üá®', 'üáµüá≤',
                  'üáªüá®', 'üá∏üá©', 'üá∏üá∑', 'üá∏üáø', 'üá∏üá™', 'üá®üá≠', 'üá∏üáæ', 'üáπüáº', 'üáπüáØ', 'üáπüáø',
                  'üáπüá≠', 'üáπüá±', 'üáπüá¨', 'üáπüá∞', 'üáπüá¥', 'üáπüáπ', 'üáπüá≥', 'üáπüá∑', 'üáπüá≤', 'üáπüá®',
                  'üáπüáª', 'üáªüáÆ', 'üá∫üá¨', 'üá∫üá¶', 'üá¶üá™', 'üá¨üáß', 'üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø', 'üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø', 'üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø', 'üá∫üá∏',
                  'üá∫üáæ', 'üá∫üáø', 'üáªüá∫', 'üáªüá¶', 'üáªüá™', 'üáªüá≥', 'üáºüá´', 'üá™üá≠', 'üáæüá™', 'üáøüá≤',
                  'üáøüáº', 'üî•', 'üíØ', 'üéâ', 'üéä', 'üéà', 'üéÅ', 'üéÄ', 'üéÇ', 'üç∞'
                ].map(emoji => (
                  <button
                    key={emoji}
                    type="button"
                    className="emoji-btn"
                    onClick={() => handleEmojiSelect(emoji)}
                  >
                    {emoji}
                  </button>
                ))}
              </div>
            )}

            {selectedPhotos.length > 0 && (
              <div className="photo-preview">
                {selectedPhotos.map((photo, index) => (
                  <img key={index} src={photo} alt={`Preview ${index + 1}`} />
                ))}
              </div>
            )}
            
            {selectedFiles.length > 0 && (
              <div className="file-preview">
                {selectedFiles.map((file, index) => (
                  <div key={index} className="file-item">
                    {file.type.startsWith('image/') ? (
                      <img src={file.url} alt={file.name} className="file-image" />
                    ) : file.type.startsWith('video/') ? (
                      <video src={file.url} className="file-video" controls />
                    ) : (
                      <div className="file-doc">
                        <span className="file-icon">{getFileIcon(file.type)}</span>
                        <div className="file-info">
                          <div className="file-name">{file.name}</div>
                          <div className="file-size">{formatFileSize(file.size)}</div>
                        </div>
                      </div>
                    )}
                    <button 
                      type="button" 
                      className="file-remove"
                      onClick={() => removeFile(index)}
                    >
                      ‚úï
                    </button>
                  </div>
                ))}
              </div>
            )}
          </form>
        </div>
      )}

      <div className="posts-list">
        {posts.map(post => (
          <div key={post.id} className="post">
            <div className="post-header">
              <div className="post-avatar">
                {user?.avatar ? (
                  <img 
                    src={user.avatar.startsWith('data:') || user.avatar.startsWith('http') 
                      ? user.avatar 
                      : `http://localhost:3000${user.avatar}`} 
                    alt="–ê–≤–∞—Ç–∞—Ä" 
                  />
                ) : (
                  <div className="avatar-placeholder">{user?.name?.charAt(0) || 'U'}</div>
                )}
              </div>
              <div className="post-meta">
                <div className="post-author">{post.author}</div>
                <div className="post-date">{post.date}</div>
              </div>
              <div className="post-menu">
                <button 
                  className="menu-btn"
                  onClick={() => setShowPostMenu(showPostMenu === post.id ? null : post.id)}
                >
                  ‚ãØ
                </button>
                {showPostMenu === post.id && (
                  <div className="post-dropdown">
                    {isOwnProfile ? (
                      <>
                        <button onClick={() => handleEditPost(post)}>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                        <button onClick={() => handleDeletePost(post.id)}>–í–∏–¥–∞–ª–∏—Ç–∏</button>
                      </>
                    ) : (
                      <>
                        <button onClick={() => handleDeletePost(post.id)}>–í–∏–¥–∞–ª–∏—Ç–∏</button>
                        <button onClick={() => handleReportPost(post.id)}>–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å</button>
                      </>
                    )}
                  </div>
                )}
              </div>
            </div>
            <div className="post-content">
              {editingPost === post.id ? (
                <div className="edit-form">
                  <textarea 
                    value={editText}
                    onChange={(e) => setEditText(e.target.value)}
                    className="edit-textarea"
                  />
                  <div className="edit-buttons">
                    <button onClick={() => handleSaveEdit(post.id)} className="save-btn">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
                    <button onClick={handleCancelEdit} className="cancel-edit-btn">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                  </div>
                </div>
              ) : (
                <p dangerouslySetInnerHTML={{ __html: renderPostContent(post.content) }}></p>
              )}
              {post.images && post.images.length > 0 && (
                <div className={`post-photos ${
                  post.images.length === 1 ? 'single' :
                  post.images.length === 2 ? 'double' : 'triple'
                }`}>
                  {post.images.map((image, index) => (
                    <img key={index} src={image} alt={`–§–æ—Ç–æ ${index + 1}`} />
                  ))}
                </div>
              )}
              {post.files && post.files.length > 0 && (
                <div className="post-files">
                  {post.files.map((file, index) => (
                    <div key={index} className="post-file-item">
                      {file.type.startsWith('image/') ? (
                        <img src={file.url} alt={file.name} className="post-file-image" />
                      ) : file.type.startsWith('video/') ? (
                        <video src={file.url} className="post-file-video" controls />
                      ) : (
                        <div className="post-file-doc">
                          <span className="file-icon">{getFileIcon(file.type)}</span>
                          <div className="file-info">
                            <div className="file-name">{file.name}</div>
                            <div className="file-size">{formatFileSize(file.size)}</div>
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
            <div className="post-actions">
              <button 
                className={`like-btn ${post.liked ? 'liked' : ''}`}
                onClick={() => handleLike(post.id)}
              >
                üëç {post.likes}
              </button>
              <button 
                className={`dislike-btn ${post.disliked ? 'disliked' : ''}`}
                onClick={() => handleDislike(post.id)}
              >
                üëé {post.dislikes}
              </button>
              <button 
                className="comment-btn"
                onClick={() => toggleComments(post.id)}
              >
                üí¨ {post.comments.length}
              </button>
              <button className="share-btn">‚ÜóÔ∏è</button>
            </div>
            
            {showComments[post.id] && (
              <div className="comments-section">
                <div className="comments-list">
                  {post.comments.map(comment => (
                    <div key={comment.id || comment._id} className="comment">
                      <div className="comment-avatar">
                        {comment.avatar ? (
                          <img 
                            src={comment.avatar.startsWith('data:') || comment.avatar.startsWith('http') 
                              ? comment.avatar 
                              : `http://localhost:3000${comment.avatar}`} 
                            alt="–ê–≤–∞—Ç–∞—Ä" 
                          />
                        ) : (
                          <div className="avatar-placeholder">{comment.author?.charAt(0) || 'U'}</div>
                        )}
                      </div>
                      <div className="comment-content">
                        <div className="comment-header">
                          <span className="comment-author">{comment.author}</span>
                          <span className="comment-date">{comment.date}</span>
                        </div>
                        <div className="comment-text">{comment.text}</div>
                      </div>
                    </div>
                  ))}
                </div>
                <div className="comment-form">
                  <div className="comment-input-wrapper">
                    <input
                      type="text"
                      placeholder="–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä..."
                      value={commentText[post.id] || ''}
                      onChange={(e) => setCommentText(prev => ({ ...prev, [post.id]: e.target.value }))}
                      onKeyPress={(e) => e.key === 'Enter' && handleCommentSubmit(post.id)}
                      className="comment-input"
                    />
                    <button 
                      onClick={() => handleCommentSubmit(post.id)}
                      disabled={!commentText[post.id]?.trim()}
                      className="comment-submit"
                    >
                      ‚û§
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default Wall;