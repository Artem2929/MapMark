import React, { useState, useEffect } from 'react';
import ReviewService from '../../services/reviewService';
import './ProgressWidget.css';

const ProgressWidget = ({ onReviewAdded }) => {
  const [stats, setStats] = useState({ reviewCount: 0, level: 1, progress: 0 });
  const [loading, setLoading] = useState(true);
  
  const fetchStats = async () => {
    try {
      const userStats = await ReviewService.getUserStats();
      setStats(userStats);
    } catch (error) {
      console.error('Error fetching stats:', error);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    fetchStats();
  }, []);
  
  useEffect(() => {
    if (onReviewAdded) {
      fetchStats();
    }
  }, [onReviewAdded]);
  
  if (loading) {
    return (
      <div className="progress-widget">
        <div className="progress-info">
          <span className="level-badge">üìç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
        </div>
      </div>
    );
  }
  
  return (
    <div className="progress-widget">
      <div className="progress-info">
        <span className="level-badge">
          üìç –†—ñ–≤–µ–Ω—å {stats.level}
        </span>
        <span className="points-badge">
          {stats.reviewCount} –≤—ñ–¥–≥—É–∫—ñ–≤
        </span>
      </div>
      <div className="progress-bar-mini">
        <div 
          className="progress-fill-mini"
          style={{ width: `${stats.progress}%` }}
        />
      </div>
      <div className="progress-text">
        {stats.level < 10 && stats.reviewsForNextLevel > 0 
          ? `–©–µ ${stats.reviewsForNextLevel} –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–æ ${stats.level + 1} —Ä—ñ–≤–Ω—è` 
          : stats.level === 10 
            ? '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å!' 
            : `${Math.round(stats.progress)}% –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è`}
      </div>
    </div>
  );
};

export default ProgressWidget;