import React, { useState, useEffect } from 'react';
import gamificationService from '../../services/gamificationService';
import './GamificationPanel.css';

const GamificationPanel = ({ isOpen, onClose }) => {
  const [userProgress, setUserProgress] = useState(null);
  const [recentBadges, setRecentBadges] = useState([]);
  const [leaderboardPosition, setLeaderboardPosition] = useState(null);

  useEffect(() => {
    if (isOpen) {
      loadUserData();
    }
  }, [isOpen]);

  const loadUserData = () => {
    const progress = gamificationService.getUserProgress();
    const position = gamificationService.getLeaderboardPosition();
    
    setUserProgress(progress);
    setLeaderboardPosition(position);
    
    // Get recent badges (last 3)
    const allBadges = progress.badges.map(badgeId => 
      gamificationService.badges[badgeId]
    ).filter(Boolean);
    setRecentBadges(allBadges.slice(-3));
  };

  const simulateActivity = (type) => {
    const newBadges = gamificationService.checkBadges({ type });
    const pointsResult = gamificationService.addPoints(
      type === 'review' ? 15 : type === 'photo' ? 10 : 5,
      `–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: ${type}`
    );
    
    loadUserData(); // Refresh data
    
    if (newBadges.length > 0) {
      alert(`üéâ –ù–æ–≤–∏–π –±–µ–π–¥–∂: ${newBadges[0].name}!`);
    }
  };

  if (!isOpen || !userProgress) return null;

  return (
    <div className="gamification-overlay">
      <div className="gamification-panel">
        <div className="panel-header">
          <h2>üèÜ –í–∞—à—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è</h2>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>

        {/* User Level & Progress */}
        <div className="level-section">
          <div className="level-info">
            <div className="level-icon">{userProgress.currentLevel?.icon}</div>
            <div className="level-details">
              <h3>–†—ñ–≤–µ–Ω—å {userProgress.level}</h3>
              <p>{userProgress.currentLevel?.name}</p>
            </div>
            <div className="points-display">
              <span className="points">{userProgress.points}</span>
              <span className="points-label">–±–∞–ª—ñ–≤</span>
            </div>
          </div>
          
          <div className="progress-bar">
            <div 
              className="progress-fill"
              style={{ width: `${userProgress.progressToNext}%` }}
            />
          </div>
          
          {userProgress.nextLevel && (
            <div className="next-level">
              –î–æ —Ä—ñ–≤–Ω—è {userProgress.nextLevel.level}: 
              {userProgress.nextLevel.minPoints - userProgress.points} –±–∞–ª—ñ–≤
            </div>
          )}
        </div>

        {/* Stats */}
        <div className="stats-grid">
          <div className="stat-item">
            <div className="stat-icon">üìù</div>
            <div className="stat-value">{userProgress.reviewsCount}</div>
            <div className="stat-label">–í—ñ–¥–≥—É–∫—ñ–≤</div>
          </div>
          <div className="stat-item">
            <div className="stat-icon">üì∏</div>
            <div className="stat-value">{userProgress.photosCount}</div>
            <div className="stat-label">–§–æ—Ç–æ</div>
          </div>
          <div className="stat-item">
            <div className="stat-icon">üìç</div>
            <div className="stat-value">{userProgress.placesVisited}</div>
            <div className="stat-label">–ú—ñ—Å—Ü—å</div>
          </div>
          <div className="stat-item">
            <div className="stat-icon">üî•</div>
            <div className="stat-value">{userProgress.streak}</div>
            <div className="stat-label">–î–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å</div>
          </div>
        </div>

        {/* Recent Badges */}
        <div className="badges-section">
          <h3>üèÖ –û—Å—Ç–∞–Ω–Ω—ñ –±–µ–π–¥–∂—ñ</h3>
          {recentBadges.length > 0 ? (
            <div className="badges-grid">
              {recentBadges.map(badge => (
                <div key={badge.id} className="badge-item">
                  <div className="badge-icon">{badge.icon}</div>
                  <div className="badge-name">{badge.name}</div>
                  <div className="badge-points">+{badge.points} –±–∞–ª—ñ–≤</div>
                </div>
              ))}
            </div>
          ) : (
            <p className="no-badges">–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –±–µ–π–¥–∂—ñ–≤. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–ª–∏—à–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏!</p>
          )}
        </div>

        {/* All Badges */}
        <div className="all-badges-section">
          <h3>üéñÔ∏è –í—Å—ñ –±–µ–π–¥–∂—ñ</h3>
          <div className="badges-grid">
            {Object.values(gamificationService.badges).map(badge => {
              const isEarned = userProgress.badges.includes(badge.id);
              return (
                <div 
                  key={badge.id} 
                  className={`badge-item ${isEarned ? 'earned' : 'locked'}`}
                >
                  <div className="badge-icon">{badge.icon}</div>
                  <div className="badge-name">{badge.name}</div>
                  <div className="badge-points">
                    {isEarned ? '‚úÖ' : `${badge.points} –±–∞–ª—ñ–≤`}
                  </div>
                  {badge.requirement && !isEarned && (
                    <div className="badge-requirement">
                      –ü–æ—Ç—Ä—ñ–±–Ω–æ: {badge.requirement}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>

        {/* Leaderboard */}
        <div className="leaderboard-section">
          <h3>üèÜ –†–µ–π—Ç–∏–Ω–≥</h3>
          <div className="leaderboard-position">
            <span className="position-icon">üèÖ</span>
            <span>–í–∞—à–∞ –ø–æ–∑–∏—Ü—ñ—è: #{leaderboardPosition}</span>
          </div>
        </div>

        {/* Demo Actions */}
        <div className="demo-actions">
          <h3>üéÆ –¢–µ—Å—Ç–æ–≤—ñ –¥—ñ—ó</h3>
          <div className="action-buttons">
            <button 
              className="action-btn review-btn"
              onClick={() => simulateActivity('review')}
            >
              üìù –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫
            </button>
            <button 
              className="action-btn photo-btn"
              onClick={() => simulateActivity('photo')}
            >
              üì∏ –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ
            </button>
            <button 
              className="action-btn visit-btn"
              onClick={() => simulateActivity('visit')}
            >
              üìç –í—ñ–¥–≤—ñ–¥–∞—Ç–∏ –º—ñ—Å—Ü–µ
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GamificationPanel;