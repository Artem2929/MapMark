import React, { useState, useEffect } from 'react';
import timeLayersService from '../../services/timeLayersService';
import './TimeLayers.css';

const TimeLayers = ({ places, onFilteredPlaces }) => {
  const [activeLayer, setActiveLayer] = useState('now');
  const [filteredPlaces, setFilteredPlaces] = useState(places);

  const layers = timeLayersService.getAllLayers();

  useEffect(() => {
    const filtered = timeLayersService.filterPlacesByLayer(places, activeLayer);
    setFilteredPlaces(filtered);
    onFilteredPlaces?.(filtered);
  }, [places, activeLayer]);

  const handleLayerChange = (layerId) => {
    setActiveLayer(layerId);
    timeLayersService.setActiveLayer(layerId);
  };

  return (
    <div className="time-layers">
      <div className="time-layers-header">
        <h3>‚è∞ –ß–∞—Å–æ–≤—ñ —à–∞—Ä–∏</h3>
        <div className="active-layer-info">
          {layers.find(l => l.id === activeLayer)?.description}
        </div>
      </div>

      <div className="layers-selector">
        {layers.map(layer => (
          <button
            key={layer.id}
            className={`layer-btn ${activeLayer === layer.id ? 'active' : ''}`}
            onClick={() => handleLayerChange(layer.id)}
            style={{ 
              '--layer-color': layer.color,
              backgroundColor: activeLayer === layer.id ? layer.color : 'transparent',
              borderColor: layer.color,
              color: activeLayer === layer.id ? 'white' : layer.color
            }}
          >
            <span className="layer-icon">{layer.icon}</span>
            <span className="layer-name">{layer.name}</span>
          </button>
        ))}
      </div>

      <div className="layer-stats">
        <div className="stat-item">
          <span className="stat-label">–î–æ—Å—Ç—É–ø–Ω–æ –º—ñ—Å—Ü—å:</span>
          <span className="stat-value">{filteredPlaces.length}</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">–í—ñ–¥–∫—Ä–∏—Ç–æ –∑–∞—Ä–∞–∑:</span>
          <span className="stat-value">
            {filteredPlaces.filter(p => p.layerData?.isOpen).length}
          </span>
        </div>
      </div>

      {activeLayer !== 'now' && (
        <div className="layer-info">
          <div className="info-card">
            <div className="info-icon">üí°</div>
            <div className="info-text">
              {getLayerDescription(activeLayer)}
            </div>
          </div>
        </div>
      )}

      <div className="places-preview">
        {filteredPlaces.slice(0, 3).map(place => (
          <PlaceTimeCard key={place.id} place={place} />
        ))}
        {filteredPlaces.length > 3 && (
          <div className="more-places">
            +{filteredPlaces.length - 3} –±—ñ–ª—å—à–µ –º—ñ—Å—Ü—å
          </div>
        )}
      </div>
    </div>
  );
};

const PlaceTimeCard = ({ place }) => {
  const layerData = place.layerData || {};

  return (
    <div className="place-time-card">
      <div className="place-basic-info">
        <div className="place-name">{place.name}</div>
        <div className="place-category">{place.category}</div>
      </div>

      <div className="place-time-info">
        <div className={`status-indicator ${layerData.status || 'unknown'}`}>
          {getStatusIcon(layerData.status)}
          <span>{getStatusText(layerData.status)}</span>
        </div>

        {layerData.crowdLevel && (
          <div className={`crowd-level ${layerData.crowdLevel}`}>
            {getCrowdIcon(layerData.crowdLevel)}
            <span>{getCrowdText(layerData.crowdLevel)}</span>
          </div>
        )}

        {layerData.nextOpenTime && (
          <div className="next-open">
            üïê {layerData.nextOpenTime}
          </div>
        )}

        {layerData.specialOffers && layerData.specialOffers.length > 0 && (
          <div className="special-offers">
            {layerData.specialOffers.map((offer, index) => (
              <div key={index} className="offer-tag">
                {getOfferIcon(offer.type)} {offer.text}
              </div>
            ))}
          </div>
        )}

        {layerData.recommendation && (
          <div className="recommendation">
            üí° {layerData.recommendation}
          </div>
        )}
      </div>
    </div>
  );
};

// Helper functions
const getLayerDescription = (layerId) => {
  const descriptions = {
    morning: '–ü–æ–∫–∞–∑—É—î –º—ñ—Å—Ü—è, —è–∫—ñ –∑–∞–∑–≤–∏—á–∞–π –ø—Ä–∞—Ü—é—é—Ç—å –≤—Ä–∞–Ω—Ü—ñ —Ç–∞ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –¥–ª—è —Å–Ω—ñ–¥–∞–Ω–∫—É',
    afternoon: '–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º—ñ—Å—Ü—è –¥–ª—è –æ–±—ñ–¥—É —Ç–∞ –¥–µ–Ω–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É',
    evening: '–ú—ñ—Å—Ü—è –¥–ª—è –≤–µ—á—ñ—Ä–Ω—å–æ–≥–æ –¥–æ–∑–≤—ñ–ª–ª—è —Ç–∞ –≤–µ—á–µ—Ä—ñ',
    weekend: '–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤'
  };
  return descriptions[layerId] || '';
};

const getStatusIcon = (status) => {
  const icons = {
    open: 'üü¢',
    closed: 'üî¥',
    usually_open: 'üü°',
    usually_closed: '‚ö´',
    weekend_open: 'üü¢',
    weekend_closed: 'üî¥',
    unknown: '‚ùì'
  };
  return icons[status] || '‚ùì';
};

const getStatusText = (status) => {
  const texts = {
    open: '–í—ñ–¥–∫—Ä–∏—Ç–æ',
    closed: '–ó–∞—á–∏–Ω–µ–Ω–æ',
    usually_open: '–ó–∞–∑–≤–∏—á–∞–π –≤—ñ–¥–∫—Ä–∏—Ç–æ',
    usually_closed: '–ó–∞–∑–≤–∏—á–∞–π –∑–∞—á–∏–Ω–µ–Ω–æ',
    weekend_open: '–ü—Ä–∞—Ü—é—î —É –≤–∏—Ö—ñ–¥–Ω—ñ',
    weekend_closed: '–ù–µ –ø—Ä–∞—Ü—é—î —É –≤–∏—Ö—ñ–¥–Ω—ñ',
    unknown: '–ù–µ–≤—ñ–¥–æ–º–æ'
  };
  return texts[status] || '–ù–µ–≤—ñ–¥–æ–º–æ';
};

const getCrowdIcon = (level) => {
  const icons = {
    low: 'üü¢',
    medium: 'üü°',
    high: 'üî¥'
  };
  return icons[level] || '‚ùì';
};

const getCrowdText = (level) => {
  const texts = {
    low: '–ú–∞–ª–æ –ª—é–¥–µ–π',
    medium: '–ü–æ–º—ñ—Ä–Ω–æ',
    high: '–ë–∞–≥–∞—Ç–æ –ª—é–¥–µ–π'
  };
  return texts[level] || '';
};

const getOfferIcon = (type) => {
  const icons = {
    happy_hour: 'üçª',
    breakfast: 'ü•ê',
    weekend_discount: 'üí∞',
    lunch_special: 'üçΩÔ∏è'
  };
  return icons[type] || 'üéÅ';
};

export default TimeLayers;