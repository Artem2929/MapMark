import React, { useState, useRef } from 'react';
import './PhotoUpload.css';

const PhotoUpload = ({ photos, onPhotosChange, maxPhotos = 10 }) => {
  const [dragOver, setDragOver] = useState(false);
  const [uploading, setUploading] = useState(false);
  const fileInputRef = useRef(null);

  const handleFileSelect = (files) => {
    const fileArray = Array.from(files);
    const remainingSlots = maxPhotos - photos.length;
    const filesToProcess = fileArray.slice(0, remainingSlots);

    if (filesToProcess.length === 0) return;

    setUploading(true);
    
    Promise.all(
      filesToProcess.map(file => processFile(file))
    ).then(processedFiles => {
      const validFiles = processedFiles.filter(Boolean);
      onPhotosChange([...photos, ...validFiles]);
      setUploading(false);
    });
  };

  const processFile = (file) => {
    return new Promise((resolve) => {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—É —Ñ–∞–π–ª—É
      if (!file.type.startsWith('image/')) {
        alert(`${file.name} –Ω–µ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º`);
        resolve(null);
        return;
      }

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—É (–º–∞–∫—Å 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert(`${file.name} –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 5MB`);
        resolve(null);
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        const img = new Image();
        img.onload = () => {
          // –°—Ç–∏—Å–Ω–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          
          // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ (–º–∞–∫—Å 1200px)
          const maxSize = 1200;
          let { width, height } = img;
          
          if (width > height && width > maxSize) {
            height = (height * maxSize) / width;
            width = maxSize;
          } else if (height > maxSize) {
            width = (width * maxSize) / height;
            height = maxSize;
          }
          
          canvas.width = width;
          canvas.height = height;
          
          // –ú–∞–ª—é–≤–∞–Ω–Ω—è —Å—Ç–∏—Å–Ω–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
          ctx.drawImage(img, 0, 0, width, height);
          
          canvas.toBlob((blob) => {
            const processedFile = {
              id: Date.now() + Math.random(),
              file: blob,
              url: canvas.toDataURL('image/jpeg', 0.8),
              name: file.name,
              size: blob.size,
              originalSize: file.size
            };
            resolve(processedFile);
          }, 'image/jpeg', 0.8);
        };
        img.src = e.target.result;
      };
      reader.readAsDataURL(file);
    });
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragOver(false);
    const files = e.dataTransfer.files;
    handleFileSelect(files);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setDragOver(false);
  };

  const handleClick = () => {
    fileInputRef.current?.click();
  };

  const handleFileInputChange = (e) => {
    const files = e.target.files;
    if (files) {
      handleFileSelect(files);
    }
    // –û—á–∏—Å—Ç–∏—Ç–∏ input –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É —Ç–æ–≥–æ –∂ —Ñ–∞–π–ª—É
    e.target.value = '';
  };

  const removePhoto = (photoId) => {
    onPhotosChange(photos.filter(photo => photo.id !== photoId));
  };

  const movePhoto = (fromIndex, toIndex) => {
    const newPhotos = [...photos];
    const [movedPhoto] = newPhotos.splice(fromIndex, 1);
    newPhotos.splice(toIndex, 0, movedPhoto);
    onPhotosChange(newPhotos);
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className="photo-upload">
      <div className="upload-stats">
        <span className="photo-count">
          {photos.length} / {maxPhotos} —Ñ–æ—Ç–æ
        </span>
        {photos.length > 0 && (
          <span className="total-size">
            –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {formatFileSize(photos.reduce((sum, photo) => sum + photo.size, 0))}
          </span>
        )}
      </div>

      <div
        className={`upload-zone ${dragOver ? 'drag-over' : ''} ${photos.length >= maxPhotos ? 'disabled' : ''}`}
        onDrop={handleDrop}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onClick={photos.length < maxPhotos ? handleClick : undefined}
      >
        <input
          ref={fileInputRef}
          type="file"
          multiple
          accept="image/*"
          onChange={handleFileInputChange}
          style={{ display: 'none' }}
        />
        
        {uploading ? (
          <div className="uploading-state">
            <div className="spinner">üîÑ</div>
            <p>–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ...</p>
          </div>
        ) : photos.length >= maxPhotos ? (
          <div className="upload-disabled">
            <div className="upload-icon">üì∏</div>
            <p>–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ</p>
          </div>
        ) : (
          <div className="upload-prompt">
            <div className="upload-icon">üì∑</div>
            <p>–ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —Ñ–æ—Ç–æ —Å—é–¥–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –≤–∏–±–æ—Ä—É</p>
            <span className="upload-hint">
              –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: JPG, PNG, GIF (–º–∞–∫—Å. 5MB –∫–æ–∂–Ω–µ)
            </span>
          </div>
        )}
      </div>

      {photos.length > 0 && (
        <div className="photos-grid">
          {photos.map((photo, index) => (
            <div key={photo.id} className="photo-item">
              <div className="photo-preview">
                <img src={photo.url} alt={photo.name} />
                <div className="photo-overlay">
                  <button
                    className="remove-photo"
                    onClick={() => removePhoto(photo.id)}
                    title="–í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ"
                  >
                    ‚úï
                  </button>
                  {index > 0 && (
                    <button
                      className="move-photo move-left"
                      onClick={() => movePhoto(index, index - 1)}
                      title="–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –ª—ñ–≤–æ—Ä—É—á"
                    >
                      ‚Üê
                    </button>
                  )}
                  {index < photos.length - 1 && (
                    <button
                      className="move-photo move-right"
                      onClick={() => movePhoto(index, index + 1)}
                      title="–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∞–≤–æ—Ä—É—á"
                    >
                      ‚Üí
                    </button>
                  )}
                </div>
                {index === 0 && (
                  <div className="main-photo-badge">
                    –ì–æ–ª–æ–≤–Ω–µ —Ñ–æ—Ç–æ
                  </div>
                )}
              </div>
              <div className="photo-info">
                <div className="photo-name">{photo.name}</div>
                <div className="photo-size">
                  {formatFileSize(photo.size)}
                  {photo.originalSize !== photo.size && (
                    <span className="compression-info">
                      (—Å—Ç–∏—Å–Ω–µ–Ω–æ –∑ {formatFileSize(photo.originalSize)})
                    </span>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {photos.length > 0 && (
        <div className="upload-tips">
          <h4>üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ñ–æ—Ç–æ:</h4>
          <ul>
            <li>–ü–µ—Ä—à–µ —Ñ–æ—Ç–æ –±—É–¥–µ –≥–æ–ª–æ–≤–Ω–∏–º —É –≤–∞—à–æ–º—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—ñ</li>
            <li>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —è—Å–∫—Ä–∞–≤–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è</li>
            <li>–ü–æ–∫–∞–∑—É–π—Ç–µ —Ä—ñ–∑–Ω—ñ —Ä–∞–∫—É—Ä—Å–∏ –≤–∞—à–æ–≥–æ –º—ñ—Å—Ü—è</li>
            <li>–£–Ω–∏–∫–∞–π—Ç–µ —Ä–æ–∑–º–∏—Ç–∏—Ö –∞–±–æ —Ç–µ–º–Ω–∏—Ö –∑–Ω—ñ–º–∫—ñ–≤</li>
          </ul>
        </div>
      )}
    </div>
  );
};

export default PhotoUpload;