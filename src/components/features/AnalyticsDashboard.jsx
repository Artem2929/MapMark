import React, { useState, useEffect } from 'react';
import analyticsService from '../../services/analyticsService';
import './AnalyticsDashboard.css';

const AnalyticsDashboard = ({ isOpen, onClose }) => {
  const [insights, setInsights] = useState(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (isOpen) {
      loadInsights();
    }
  }, [isOpen]);

  const loadInsights = async () => {
    setIsLoading(true);
    try {
      const userInsights = analyticsService.getUserInsights();
      setInsights(userInsights);
    } catch (error) {
      console.error('Failed to load insights:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const exportData = () => {
    const data = analyticsService.exportUserData();
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `mapmark-analytics-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    URL.revokeObjectURL(url);
  };

  const clearData = () => {
    if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ?')) {
      analyticsService.clearUserData();
      loadInsights();
    }
  };

  const renderOverview = () => (
    <div className="analytics-section">
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">üìç</div>
          <div className="stat-value">{insights?.totalPlacesVisited || 0}</div>
          <div className="stat-label">–í—ñ–¥–≤—ñ–¥–∞–Ω–æ –º—ñ—Å—Ü—å</div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">‚ù§Ô∏è</div>
          <div className="stat-value">{insights?.favoriteCategory || '–ù–µ–º–∞—î'}</div>
          <div className="stat-label">–£–ª—é–±–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è</div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">üïê</div>
          <div className="stat-value">{insights?.mostActiveHour || 12}:00</div>
          <div className="stat-label">–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∞ –≥–æ–¥–∏–Ω–∞</div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">‚è±Ô∏è</div>
          <div className="stat-value">{insights?.averageSessionTime || 0} —Ö–≤</div>
          <div className="stat-label">–°–µ—Ä–µ–¥–Ω—è —Å–µ—Å—ñ—è</div>
        </div>
      </div>

      {insights?.weeklyActivity && (
        <div className="weekly-activity">
          <h3>üìä –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ —Ç–∏–∂–¥–µ–Ω—å</h3>
          <div className="activity-chart">
            {Object.entries(insights.weeklyActivity).map(([date, count]) => (
              <div key={date} className="activity-bar">
                <div 
                  className="bar-fill"
                  style={{ height: `${Math.max(10, count * 20)}px` }}
                />
                <div className="bar-label">
                  {new Date(date).toLocaleDateString('uk', { weekday: 'short' })}
                </div>
                <div className="bar-count">{count}</div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );

  const renderSearchPatterns = () => (
    <div className="analytics-section">
      <h3>üîç –ü–∞—Ç–µ—Ä–Ω–∏ –ø–æ—à—É–∫—É</h3>
      {insights?.searchPatterns?.length > 0 ? (
        <div className="search-patterns">
          {insights.searchPatterns.map((pattern, index) => (
            <div key={index} className="pattern-item">
              <div className="pattern-word">{pattern.word}</div>
              <div className="pattern-bar">
                <div 
                  className="pattern-fill"
                  style={{ width: `${(pattern.count / insights.searchPatterns[0].count) * 100}%` }}
                />
              </div>
              <div className="pattern-count">{pattern.count}</div>
            </div>
          ))}
        </div>
      ) : (
        <div className="no-data">
          <div className="no-data-icon">üîç</div>
          <p>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ—à—É–∫</p>
        </div>
      )}
    </div>
  );

  const renderLocationPatterns = () => (
    <div className="analytics-section">
      <h3>üìç –õ–æ–∫–∞—Ü—ñ–π–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏</h3>
      {insights?.locationPatterns ? (
        <div className="location-insights">
          <div className="location-stat">
            <div className="location-icon">üéØ</div>
            <div className="location-info">
              <div className="location-title">–¶–µ–Ω—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</div>
              <div className="location-coords">
                {insights.locationPatterns.center.lat.toFixed(4)}, {insights.locationPatterns.center.lng.toFixed(4)}
              </div>
            </div>
          </div>
          
          <div className="location-stat">
            <div className="location-icon">üìè</div>
            <div className="location-info">
              <div className="location-title">–†–∞–¥—ñ—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</div>
              <div className="location-value">{insights.locationPatterns.radius}–º</div>
            </div>
          </div>
          
          {insights.locationPatterns.mostVisitedArea?.locations?.length > 0 && (
            <div className="location-stat">
              <div className="location-icon">üèÜ</div>
              <div className="location-info">
                <div className="location-title">–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∞ –∑–æ–Ω–∞</div>
                <div className="location-value">
                  {insights.locationPatterns.mostVisitedArea.locations.length} –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å
                </div>
              </div>
            </div>
          )}
        </div>
      ) : (
        <div className="no-data">
          <div className="no-data-icon">üìç</div>
          <p>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ª–æ–∫–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö</p>
        </div>
      )}
    </div>
  );

  const renderPrivacy = () => (
    <div className="analytics-section">
      <h3>üîí –ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å —Ç–∞ –¥–∞–Ω—ñ</h3>
      
      <div className="privacy-info">
        <div className="privacy-item">
          <div className="privacy-icon">üìä</div>
          <div className="privacy-content">
            <h4>–ó–±—ñ—Ä –¥–∞–Ω–∏—Ö</h4>
            <p>–ú–∏ –∑–±–∏—Ä–∞—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É. –í—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –≤–∞—à–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó.</p>
          </div>
        </div>
        
        <div className="privacy-item">
          <div className="privacy-icon">üîê</div>
          <div className="privacy-content">
            <h4>–ë–µ–∑–ø–µ–∫–∞</h4>
            <p>–í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º —ñ –∑–∞—Ö–∏—â–µ–Ω—ñ —Å—É—á–∞—Å–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è.</p>
          </div>
        </div>
      </div>

      <div className="privacy-actions">
        <button className="privacy-btn export-btn" onClick={exportData}>
          üì§ –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
        </button>
        <button className="privacy-btn clear-btn" onClick={clearData}>
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ
        </button>
      </div>
    </div>
  );

  if (!isOpen) return null;

  return (
    <div className="analytics-overlay">
      <div className="analytics-dashboard">
        <div className="dashboard-header">
          <h2>üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ —ñ–Ω—Å–∞–π—Ç–∏</h2>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>

        <div className="dashboard-tabs">
          <button 
            className={`tab-btn ${activeTab === 'overview' ? 'active' : ''}`}
            onClick={() => setActiveTab('overview')}
          >
            üìà –û–≥–ª—è–¥
          </button>
          <button 
            className={`tab-btn ${activeTab === 'search' ? 'active' : ''}`}
            onClick={() => setActiveTab('search')}
          >
            üîç –ü–æ—à—É–∫
          </button>
          <button 
            className={`tab-btn ${activeTab === 'location' ? 'active' : ''}`}
            onClick={() => setActiveTab('location')}
          >
            üìç –õ–æ–∫–∞—Ü—ñ—ó
          </button>
          <button 
            className={`tab-btn ${activeTab === 'privacy' ? 'active' : ''}`}
            onClick={() => setActiveTab('privacy')}
          >
            üîí –ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å
          </button>
        </div>

        <div className="dashboard-content">
          {isLoading ? (
            <div className="loading-state">
              <div className="loading-spinner">‚è≥</div>
              <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏...</p>
            </div>
          ) : (
            <>
              {activeTab === 'overview' && renderOverview()}
              {activeTab === 'search' && renderSearchPatterns()}
              {activeTab === 'location' && renderLocationPatterns()}
              {activeTab === 'privacy' && renderPrivacy()}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default AnalyticsDashboard;