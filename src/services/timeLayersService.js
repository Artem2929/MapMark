// Time Layers Service - –ß–∞—Å–æ–≤—ñ —à–∞—Ä–∏ –∫–∞—Ä—Ç–∏
class TimeLayersService {
  constructor() {
    this.currentLayer = 'now';
    this.layers = this.initializeLayers();
  }

  initializeLayers() {
    return {
      now: {
        id: 'now',
        name: '–ó–∞—Ä–∞–∑',
        icon: 'üïê',
        color: '#3b82f6',
        description: '–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –º—ñ—Å—Ü—å'
      },
      morning: {
        id: 'morning',
        name: '–†–∞–Ω–æ–∫',
        icon: 'üåÖ',
        color: '#f59e0b',
        description: '6:00 - 12:00',
        timeRange: { start: 6, end: 12 }
      },
      afternoon: {
        id: 'afternoon',
        name: '–î–µ–Ω—å',
        icon: '‚òÄÔ∏è',
        color: '#10b981',
        description: '12:00 - 18:00',
        timeRange: { start: 12, end: 18 }
      },
      evening: {
        id: 'evening',
        name: '–í–µ—á—ñ—Ä',
        icon: 'üåÜ',
        color: '#8b5cf6',
        description: '18:00 - 24:00',
        timeRange: { start: 18, end: 24 }
      },
      weekend: {
        id: 'weekend',
        name: '–í–∏—Ö—ñ–¥–Ω—ñ',
        icon: 'üéâ',
        color: '#ef4444',
        description: '–°—É–±–æ—Ç–∞ —Ç–∞ –Ω–µ–¥—ñ–ª—è'
      }
    };
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞—Ä—É
  setActiveLayer(layerId) {
    if (this.layers[layerId]) {
      this.currentLayer = layerId;
      return true;
    }
    return false;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞—Ä—É
  getActiveLayer() {
    return this.layers[this.currentLayer];
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —à–∞—Ä—ñ–≤
  getAllLayers() {
    return Object.values(this.layers);
  }

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –º—ñ—Å—Ü—å –∑–∞ –∞–∫—Ç–∏–≤–Ω–∏–º —à–∞—Ä–æ–º
  filterPlacesByLayer(places, layerId = this.currentLayer) {
    const layer = this.layers[layerId];
    if (!layer) return places;

    return places.map(place => ({
      ...place,
      layerData: this.getPlaceLayerData(place, layer)
    })).filter(place => place.layerData.isAvailable);
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –º—ñ—Å—Ü—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞—Ä—É
  getPlaceLayerData(place, layer) {
    const now = new Date();
    const currentHour = now.getHours();
    const isWeekend = now.getDay() === 0 || now.getDay() === 6;

    switch (layer.id) {
      case 'now':
        return this.getCurrentLayerData(place, currentHour, isWeekend);
      
      case 'morning':
      case 'afternoon':
      case 'evening':
        return this.getTimeRangeLayerData(place, layer.timeRange);
      
      case 'weekend':
        return this.getWeekendLayerData(place);
      
      default:
        return { isAvailable: true, status: 'unknown' };
    }
  }

  getCurrentLayerData(place, currentHour, isWeekend) {
    const workingHours = place.workingHours || this.getDefaultWorkingHours(place.category);
    const todayHours = isWeekend ? workingHours.weekend : workingHours.weekday;
    
    const isOpen = this.isPlaceOpen(todayHours, currentHour);
    const crowdLevel = this.getCrowdLevel(place, currentHour, isWeekend);
    
    return {
      isAvailable: true,
      isOpen,
      status: isOpen ? 'open' : 'closed',
      crowdLevel,
      specialOffers: this.getSpecialOffers(place, currentHour, isWeekend),
      nextOpenTime: isOpen ? null : this.getNextOpenTime(place, currentHour, isWeekend)
    };
  }

  getTimeRangeLayerData(place, timeRange) {
    const workingHours = place.workingHours || this.getDefaultWorkingHours(place.category);
    const isUsuallyOpen = this.isUsuallyOpenInRange(workingHours, timeRange);
    const avgCrowdLevel = this.getAverageCrowdLevel(place, timeRange);
    
    return {
      isAvailable: isUsuallyOpen,
      status: isUsuallyOpen ? 'usually_open' : 'usually_closed',
      crowdLevel: avgCrowdLevel,
      recommendation: this.getTimeRecommendation(place, timeRange)
    };
  }

  getWeekendLayerData(place) {
    const workingHours = place.workingHours || this.getDefaultWorkingHours(place.category);
    const isOpenWeekends = workingHours.weekend && workingHours.weekend.start !== null;
    
    return {
      isAvailable: isOpenWeekends,
      status: isOpenWeekends ? 'weekend_open' : 'weekend_closed',
      crowdLevel: this.getWeekendCrowdLevel(place),
      weekendSpecials: this.getWeekendSpecials(place)
    };
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º—ñ—Å—Ü–µ –≤—ñ–¥–∫—Ä–∏—Ç–µ
  isPlaceOpen(hours, currentHour) {
    if (!hours || hours.start === null || hours.end === null) return false;
    
    if (hours.start <= hours.end) {
      return currentHour >= hours.start && currentHour < hours.end;
    } else {
      // –ü—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ –ø—ñ–≤–Ω—ñ—á
      return currentHour >= hours.start || currentHour < hours.end;
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—Å—Ç—ñ
  getCrowdLevel(place, hour, isWeekend) {
    // –°–∏–º—É–ª—è—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É –º—ñ—Å—Ü—è —Ç–∞ —á–∞—Å—É
    const baseLevel = place.popularTimes?.[hour] || Math.random();
    const weekendMultiplier = isWeekend ? 1.3 : 1;
    const level = Math.min(1, baseLevel * weekendMultiplier);
    
    if (level < 0.3) return 'low';
    if (level < 0.7) return 'medium';
    return 'high';
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π
  getSpecialOffers(place, hour, isWeekend) {
    const offers = [];
    
    // Happy hour
    if (place.category === '–ë–∞—Ä' && hour >= 17 && hour <= 19) {
      offers.push({ type: 'happy_hour', text: 'Happy Hour –¥–æ 19:00' });
    }
    
    // –°–Ω—ñ–¥–∞–Ω–æ–∫
    if (place.category === '–ö–∞—Ñ–µ' && hour >= 7 && hour <= 11) {
      offers.push({ type: 'breakfast', text: '–°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –º–µ–Ω—é —Å–Ω—ñ–¥–∞–Ω–∫—ñ–≤' });
    }
    
    // –í–∏—Ö—ñ–¥–Ω—ñ –∑–Ω–∏–∂–∫–∏
    if (isWeekend && Math.random() > 0.7) {
      offers.push({ type: 'weekend_discount', text: '–ó–Ω–∏–∂–∫–∞ 10% —É –≤–∏—Ö—ñ–¥–Ω—ñ' });
    }
    
    return offers;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –≥–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏
  getDefaultWorkingHours(category) {
    const schedules = {
      '–ö–∞—Ñ–µ': {
        weekday: { start: 8, end: 22 },
        weekend: { start: 9, end: 23 }
      },
      '–†–µ—Å—Ç–æ—Ä–∞–Ω': {
        weekday: { start: 11, end: 23 },
        weekend: { start: 11, end: 24 }
      },
      '–ë–∞—Ä': {
        weekday: { start: 17, end: 2 },
        weekend: { start: 17, end: 3 }
      },
      '–ü–∞—Ä–∫': {
        weekday: { start: 6, end: 22 },
        weekend: { start: 6, end: 22 }
      },
      '–ú–∞–≥–∞–∑–∏–Ω': {
        weekday: { start: 9, end: 21 },
        weekend: { start: 10, end: 20 }
      }
    };
    
    return schedules[category] || {
      weekday: { start: 9, end: 18 },
      weekend: { start: 10, end: 17 }
    };
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞—Å—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
  getNextOpenTime(place, currentHour, isWeekend) {
    const workingHours = place.workingHours || this.getDefaultWorkingHours(place.category);
    const todayHours = isWeekend ? workingHours.weekend : workingHours.weekday;
    
    if (currentHour < todayHours.start) {
      return `–í—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è –æ ${todayHours.start}:00`;
    } else {
      const tomorrowHours = isWeekend ? workingHours.weekday : workingHours.weekend;
      return `–í—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞ –æ ${tomorrowHours.start}:00`;
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–∑–≤–∏—á–∞–π –≤—ñ–¥–∫—Ä–∏—Ç–æ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ
  isUsuallyOpenInRange(workingHours, timeRange) {
    const weekdayOverlap = this.hasTimeOverlap(workingHours.weekday, timeRange);
    const weekendOverlap = this.hasTimeOverlap(workingHours.weekend, timeRange);
    return weekdayOverlap || weekendOverlap;
  }

  hasTimeOverlap(hours, range) {
    if (!hours || hours.start === null) return false;
    return !(hours.end <= range.start || hours.start >= range.end);
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
  getTimeRecommendation(place, timeRange) {
    const recommendations = {
      morning: '–Ü–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–Ω—ñ–¥–∞–Ω–∫—É —Ç–∞ —Ä–∞–Ω–∫–æ–≤–æ—ó –∫–∞–≤–∏',
      afternoon: '–ß—É–¥–æ–≤–∏–π —á–∞—Å –¥–ª—è –æ–±—ñ–¥—É —Ç–∞ —Ä–æ–±–æ—Ç–∏',
      evening: '–í—ñ–¥–º—ñ–Ω–Ω–æ –¥–ª—è –≤–µ—á–µ—Ä—ñ —Ç–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É'
    };
    
    return recommendations[timeRange.id] || '–ì–∞—Ä–Ω–∏–π —á–∞—Å –¥–ª—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è';
  }

  getAverageCrowdLevel(place, timeRange) {
    // –°–∏–º—É–ª—è—Ü—ñ—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—Å—Ç—ñ
    const levels = ['low', 'medium', 'high'];
    return levels[Math.floor(Math.random() * levels.length)];
  }

  getWeekendCrowdLevel(place) {
    // –í–∏—Ö—ñ–¥–Ω—ñ –∑–∞–∑–≤–∏—á–∞–π –±—ñ–ª—å—à –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
    const levels = ['medium', 'high'];
    return levels[Math.floor(Math.random() * levels.length)];
  }

  getWeekendSpecials(place) {
    const specials = [
      '–°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –≤–∏—Ö—ñ–¥–Ω–µ –º–µ–Ω—é',
      '–ñ–∏–≤–∞ –º—É–∑–∏–∫–∞ –ø–æ —Å—É–±–æ—Ç–∞—Ö',
      '–î–∏—Ç—è—á–µ –º–µ–Ω—é —É –≤–∏—Ö—ñ–¥–Ω—ñ',
      '–ü–æ–¥–æ–≤–∂–µ–Ω–∏–π —á–∞—Å —Ä–æ–±–æ—Ç–∏'
    ];
    
    return Math.random() > 0.5 ? [specials[Math.floor(Math.random() * specials.length)]] : [];
  }
}

export default new TimeLayersService();