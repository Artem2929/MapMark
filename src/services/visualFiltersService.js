// Visual Filters Service - –í—ñ–∑—É–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –Ω–∞—Å—Ç—Ä–æ—é
class VisualFiltersService {
  constructor() {
    this.activeFilters = this.loadActiveFilters();
    this.moodFilters = this.initializeMoodFilters();
    this.sliderFilters = this.initializeSliderFilters();
  }

  loadActiveFilters() {
    return JSON.parse(localStorage.getItem('mapmark_visual_filters')) || {
      moods: [],
      sliders: {}
    };
  }

  saveActiveFilters() {
    localStorage.setItem('mapmark_visual_filters', JSON.stringify(this.activeFilters));
  }

  initializeMoodFilters() {
    return [
      {
        id: 'energetic',
        name: '–ï–Ω–µ—Ä–≥—ñ–π–Ω–æ',
        icon: 'üî•',
        color: '#ef4444',
        description: '–ñ–≤–∞–≤—ñ, –∞–∫—Ç–∏–≤–Ω—ñ –º—ñ—Å—Ü—è',
        tags: ['loud', 'crowded', 'party', 'music', 'dancing']
      },
      {
        id: 'calm',
        name: '–°–ø–æ–∫—ñ–π–Ω–æ',
        icon: 'üåø',
        color: '#10b981',
        description: '–¢–∏—Ö—ñ, —Ä–æ–∑—Å–ª–∞–±–ª—é—é—á—ñ –º—ñ—Å—Ü—è',
        tags: ['quiet', 'peaceful', 'nature', 'meditation', 'reading']
      },
      {
        id: 'work',
        name: '–î–ª—è —Ä–æ–±–æ—Ç–∏',
        icon: 'üíº',
        color: '#3b82f6',
        description: '–ú—ñ—Å—Ü—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏',
        tags: ['wifi', 'quiet', 'outlets', 'workspace', 'coffee']
      },
      {
        id: 'fun',
        name: '–í–µ—Å–µ–ª–æ',
        icon: 'üéâ',
        color: '#f59e0b',
        description: '–†–æ–∑–≤–∞–∂–∞–ª—å–Ω—ñ –º—ñ—Å—Ü—è',
        tags: ['entertainment', 'games', 'social', 'events', 'activities']
      },
      {
        id: 'romantic',
        name: '–†–æ–º–∞–Ω—Ç–∏—á–Ω–æ',
        icon: 'üíï',
        color: '#ec4899',
        description: '–†–æ–º–∞–Ω—Ç–∏—á–Ω—ñ –º—ñ—Å—Ü—è –¥–ª—è –ø–æ–±–∞—á–µ–Ω—å',
        tags: ['intimate', 'cozy', 'candlelight', 'couples', 'wine']
      },
      {
        id: 'family',
        name: '–°—ñ–º–µ–π–Ω–æ',
        icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
        color: '#8b5cf6',
        description: '–ú—ñ—Å—Ü—è –¥–ª—è —Å—ñ–º–µ–π–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É',
        tags: ['kids', 'family', 'playground', 'safe', 'spacious']
      }
    ];
  }

  initializeSliderFilters() {
    return [
      {
        id: 'noise_level',
        name: '–†—ñ–≤–µ–Ω—å —à—É–º—É',
        leftLabel: '–¢–∏—Ö–æ',
        rightLabel: '–®—É–º–Ω–æ',
        leftIcon: 'ü§´',
        rightIcon: 'üì¢',
        min: 0,
        max: 100,
        defaultValue: 50,
        color: '#64748b'
      },
      {
        id: 'price_range',
        name: '–¶—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω',
        leftLabel: '–ë—é–¥–∂–µ—Ç–Ω–æ',
        rightLabel: '–ü—Ä–µ–º—ñ—É–º',
        leftIcon: 'üí∏',
        rightIcon: 'üíé',
        min: 0,
        max: 100,
        defaultValue: 50,
        color: '#10b981'
      },
      {
        id: 'crowd_level',
        name: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å',
        leftLabel: '–ü—É—Å—Ç–æ',
        rightLabel: '–ü–æ–≤–Ω–æ',
        leftIcon: 'üèúÔ∏è',
        rightIcon: 'üë•',
        min: 0,
        max: 100,
        defaultValue: 50,
        color: '#f59e0b'
      },
      {
        id: 'formality',
        name: '–§–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å',
        leftLabel: 'Casual',
        rightLabel: '–û—Ñ—ñ—Ü—ñ–π–Ω–æ',
        leftIcon: 'üëï',
        rightIcon: 'ü§µ',
        min: 0,
        max: 100,
        defaultValue: 50,
        color: '#8b5cf6'
      }
    ];
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è mood —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  setMoodFilters(moodIds) {
    this.activeFilters.moods = moodIds;
    this.saveActiveFilters();
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è mood —Ñ—ñ–ª—å—Ç—Ä–∞
  toggleMoodFilter(moodId) {
    const index = this.activeFilters.moods.indexOf(moodId);
    if (index > -1) {
      this.activeFilters.moods.splice(index, 1);
    } else {
      this.activeFilters.moods.push(moodId);
    }
    this.saveActiveFilters();
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è slider —Ñ—ñ–ª—å—Ç—Ä–∞
  setSliderFilter(sliderId, value) {
    this.activeFilters.sliders[sliderId] = value;
    this.saveActiveFilters();
  }

  // –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  clearAllFilters() {
    this.activeFilters = { moods: [], sliders: {} };
    this.saveActiveFilters();
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  getActiveFilters() {
    return this.activeFilters;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è mood —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  getMoodFilters() {
    return this.moodFilters;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è slider —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  getSliderFilters() {
    return this.sliderFilters;
  }

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –º—ñ—Å—Ü—å –∑–∞ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
  filterPlaces(places) {
    if (!places || places.length === 0) return [];

    return places.filter(place => {
      return this.matchesMoodFilters(place) && this.matchesSliderFilters(place);
    }).map(place => ({
      ...place,
      filterScore: this.calculateFilterScore(place)
    })).sort((a, b) => b.filterScore - a.filterScore);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ mood —Ñ—ñ–ª—å—Ç—Ä–∞–º
  matchesMoodFilters(place) {
    if (this.activeFilters.moods.length === 0) return true;

    return this.activeFilters.moods.some(moodId => {
      const mood = this.moodFilters.find(m => m.id === moodId);
      if (!mood) return false;

      return this.placeMatchesMood(place, mood);
    });
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ slider —Ñ—ñ–ª—å—Ç—Ä–∞–º
  matchesSliderFilters(place) {
    const sliders = this.activeFilters.sliders;
    
    for (const [sliderId, value] of Object.entries(sliders)) {
      if (!this.placeMatchesSlider(place, sliderId, value)) {
        return false;
      }
    }
    
    return true;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –º—ñ—Å—Ü—è mood —Ñ—ñ–ª—å—Ç—Ä—É
  placeMatchesMood(place, mood) {
    const placeTags = this.extractPlaceTags(place);
    const moodTags = mood.tags;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–µ—Ä–µ—Ç–∏–Ω –º—ñ–∂ —Ç–µ–≥–∞–º–∏ –º—ñ—Å—Ü—è —Ç–∞ mood
    const intersection = placeTags.filter(tag => moodTags.includes(tag));
    return intersection.length > 0;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –º—ñ—Å—Ü—è slider —Ñ—ñ–ª—å—Ç—Ä—É
  placeMatchesSlider(place, sliderId, filterValue) {
    const placeValue = this.getPlaceSliderValue(place, sliderId);
    const tolerance = 25; // –î–æ–ø—É—Å—Ç–∏–º–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    
    return Math.abs(placeValue - filterValue) <= tolerance;
  }

  // –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ –∑ –º—ñ—Å—Ü—è
  extractPlaceTags(place) {
    const tags = [];
    
    // –¢–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    const categoryTags = this.getCategoryTags(place.category);
    tags.push(...categoryTags);
    
    // –¢–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–π—Ç–∏–Ω–≥—É
    if (place.rating >= 4.5) tags.push('high_quality');
    if (place.rating <= 2.5) tags.push('low_quality');
    
    // –¢–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü—ñ–Ω–∏
    if (place.priceLevel <= 1) tags.push('budget', 'cheap');
    if (place.priceLevel >= 4) tags.push('expensive', 'luxury');
    
    // –¢–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–µ–π
    if (place.hasWifi) tags.push('wifi');
    if (place.hasParking) tags.push('parking');
    if (place.petFriendly) tags.push('pet_friendly');
    if (place.hasMusic) tags.push('music');
    if (place.hasOutdoorSeating) tags.push('outdoor');
    
    // –¢–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏ (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
    if (place.atmosphere) {
      tags.push(...place.atmosphere);
    }
    
    return tags;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  getCategoryTags(category) {
    const categoryTagMap = {
      '–ö–∞—Ñ–µ': ['coffee', 'casual', 'wifi', 'work'],
      '–†–µ—Å—Ç–æ—Ä–∞–Ω': ['food', 'dining', 'social'],
      '–ë–∞—Ä': ['drinks', 'loud', 'party', 'music', 'social'],
      '–ü–∞—Ä–∫': ['nature', 'quiet', 'peaceful', 'outdoor', 'family'],
      '–ú—É–∑–µ–π': ['quiet', 'educational', 'cultural'],
      '–°–ø–æ—Ä—Ç–∑–∞–ª': ['energetic', 'active', 'fitness'],
      '–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞': ['quiet', 'work', 'reading', 'peaceful'],
      '–ö–ª—É–±': ['loud', 'party', 'dancing', 'music', 'energetic'],
      '–ì–æ—Ç–µ–ª—å': ['comfortable', 'service'],
      '–ú–∞–≥–∞–∑–∏–Ω': ['shopping', 'busy']
    };
    
    return categoryTagMap[category] || [];
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è slider –¥–ª—è –º—ñ—Å—Ü—è
  getPlaceSliderValue(place, sliderId) {
    switch (sliderId) {
      case 'noise_level':
        return this.calculateNoiseLevel(place);
      case 'price_range':
        return (place.priceLevel || 2) * 25; // 0-4 -> 0-100
      case 'crowd_level':
        return this.calculateCrowdLevel(place);
      case 'formality':
        return this.calculateFormalityLevel(place);
      default:
        return 50;
    }
  }

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–≤–Ω—è —à—É–º—É
  calculateNoiseLevel(place) {
    let noise = 50; // –±–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å
    
    const category = place.category;
    if (['–ë–∞—Ä', '–ö–ª—É–±'].includes(category)) noise += 30;
    if (['–ö–∞—Ñ–µ', '–†–µ—Å—Ç–æ—Ä–∞–Ω'].includes(category)) noise += 10;
    if (['–ü–∞—Ä–∫', '–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞', '–ú—É–∑–µ–π'].includes(category)) noise -= 30;
    
    if (place.hasMusic) noise += 20;
    if (place.hasOutdoorSeating) noise -= 10;
    
    return Math.max(0, Math.min(100, noise));
  }

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–≤–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—Å—Ç—ñ
  calculateCrowdLevel(place) {
    let crowd = 50;
    
    if (place.rating >= 4.5) crowd += 20; // –ø–æ–ø—É–ª—è—Ä–Ω—ñ –º—ñ—Å—Ü—è –±—ñ–ª—å—à –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
    if (place.priceLevel <= 1) crowd += 15; // –¥–µ—à–µ–≤—ñ –º—ñ—Å—Ü—è –±—ñ–ª—å—à –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
    if (place.priceLevel >= 4) crowd -= 15; // –¥–æ—Ä–æ–≥—ñ –º—ñ—Å—Ü—è –º–µ–Ω—à –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
    
    const category = place.category;
    if (['–ö–ª—É–±', '–ë–∞—Ä'].includes(category)) crowd += 25;
    if (['–ü–∞—Ä–∫', '–ú—É–∑–µ–π'].includes(category)) crowd -= 15;
    
    return Math.max(0, Math.min(100, crowd));
  }

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–≤–Ω—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—ñ
  calculateFormalityLevel(place) {
    let formality = 50;
    
    if (place.priceLevel >= 4) formality += 30;
    if (place.priceLevel <= 1) formality -= 20;
    
    const category = place.category;
    if (['–ì–æ—Ç–µ–ª—å', '–†–µ—Å—Ç–æ—Ä–∞–Ω'].includes(category)) formality += 15;
    if (['–ë–∞—Ä', '–ö–∞—Ñ–µ', '–ü–∞—Ä–∫'].includes(category)) formality -= 15;
    if (category === '–ö–ª—É–±') formality -= 25;
    
    return Math.max(0, Math.min(100, formality));
  }

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Ñ—ñ–ª—å—Ç—Ä–∞–º
  calculateFilterScore(place) {
    let score = 0;
    let totalWeight = 0;
    
    // –°–∫–æ—Ä –∑–∞ mood —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
    if (this.activeFilters.moods.length > 0) {
      const moodScore = this.calculateMoodScore(place);
      score += moodScore * 0.6;
      totalWeight += 0.6;
    }
    
    // –°–∫–æ—Ä –∑–∞ slider —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
    const sliderScore = this.calculateSliderScore(place);
    score += sliderScore * 0.4;
    totalWeight += 0.4;
    
    return totalWeight > 0 ? score / totalWeight : 0;
  }

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–æ—Ä—É –∑–∞ mood —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
  calculateMoodScore(place) {
    if (this.activeFilters.moods.length === 0) return 100;
    
    const placeTags = this.extractPlaceTags(place);
    let totalScore = 0;
    
    this.activeFilters.moods.forEach(moodId => {
      const mood = this.moodFilters.find(m => m.id === moodId);
      if (mood) {
        const matchingTags = placeTags.filter(tag => mood.tags.includes(tag));
        const moodScore = (matchingTags.length / mood.tags.length) * 100;
        totalScore += moodScore;
      }
    });
    
    return totalScore / this.activeFilters.moods.length;
  }

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–æ—Ä—É –∑–∞ slider —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
  calculateSliderScore(place) {
    const sliders = this.activeFilters.sliders;
    if (Object.keys(sliders).length === 0) return 100;
    
    let totalScore = 0;
    let count = 0;
    
    for (const [sliderId, filterValue] of Object.entries(sliders)) {
      const placeValue = this.getPlaceSliderValue(place, sliderId);
      const difference = Math.abs(placeValue - filterValue);
      const score = Math.max(0, 100 - difference);
      totalScore += score;
      count++;
    }
    
    return count > 0 ? totalScore / count : 100;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –º—ñ—Å—Ü—è
  getPlaceColorCoding(place) {
    const activeMoods = this.activeFilters.moods;
    if (activeMoods.length === 0) return '#64748b'; // default color
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–ª—ñ—Ä –ø–µ—Ä—à–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ mood
    for (const moodId of activeMoods) {
      const mood = this.moodFilters.find(m => m.id === moodId);
      if (mood && this.placeMatchesMood(place, mood)) {
        return mood.color;
      }
    }
    
    return '#64748b';
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
  getFilterStats(originalPlaces, filteredPlaces) {
    return {
      total: originalPlaces.length,
      filtered: filteredPlaces.length,
      percentage: originalPlaces.length > 0 ? 
        Math.round((filteredPlaces.length / originalPlaces.length) * 100) : 0,
      activeMoods: this.activeFilters.moods.length,
      activeSliders: Object.keys(this.activeFilters.sliders).length
    };
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É
  getRecommendedFilters() {
    const hour = new Date().getHours();
    const recommendations = [];
    
    if (hour >= 7 && hour <= 11) {
      recommendations.push({
        type: 'mood',
        id: 'work',
        reason: '–†–∞–Ω–∫–æ–≤–∏–π —á–∞—Å - —ñ–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏'
      });
    } else if (hour >= 12 && hour <= 14) {
      recommendations.push({
        type: 'mood',
        id: 'calm',
        reason: '–û–±—ñ–¥–Ω—ñ–π —á–∞—Å - —á–∞—Å –¥–ª—è —Å–ø–æ–∫—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É'
      });
    } else if (hour >= 18 && hour <= 22) {
      recommendations.push({
        type: 'mood',
        id: 'fun',
        reason: '–í–µ—á—ñ—Ä–Ω—ñ–π —á–∞—Å - —á–∞—Å –¥–ª—è —Ä–æ–∑–≤–∞–≥'
      });
    }
    
    return recommendations;
  }
}

export default new VisualFiltersService();