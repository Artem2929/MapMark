// Social Service for MapMark - Friends, Following, Social Features
class SocialService {
  constructor() {
    this.friends = this.loadFriends();
    this.following = this.loadFollowing();
    this.socialSettings = this.loadSocialSettings();
  }

  loadFriends() {
    return JSON.parse(localStorage.getItem('mapmark_friends')) || [];
  }

  loadFollowing() {
    return JSON.parse(localStorage.getItem('mapmark_following')) || [];
  }

  loadSocialSettings() {
    return JSON.parse(localStorage.getItem('mapmark_social_settings')) || {
      shareLocation: true,
      showOnlineStatus: true,
      allowFriendRequests: true,
      notifyOnFriendActivity: true,
      publicProfile: false
    };
  }

  saveFriends() {
    localStorage.setItem('mapmark_friends', JSON.stringify(this.friends));
  }

  saveFollowing() {
    localStorage.setItem('mapmark_following', JSON.stringify(this.following));
  }

  saveSocialSettings() {
    localStorage.setItem('mapmark_social_settings', JSON.stringify(this.socialSettings));
  }

  // Friend Management
  async sendFriendRequest(userId) {
    // Mock API call
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({ success: true, message: '–ó–∞–ø–∏—Ç –Ω–∞ –¥—Ä—É–∂–±—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ' });
      }, 500);
    });
  }

  async acceptFriendRequest(userId) {
    const friend = {
      id: userId,
      name: `User ${userId}`,
      avatar: 'üë§',
      level: Math.floor(Math.random() * 10) + 1,
      lastSeen: new Date().toISOString(),
      mutualFriends: Math.floor(Math.random() * 5)
    };

    this.friends.push(friend);
    this.saveFriends();
    
    return { success: true, friend };
  }

  removeFriend(userId) {
    this.friends = this.friends.filter(friend => friend.id !== userId);
    this.saveFriends();
  }

  // Following System
  followUser(userId) {
    if (!this.following.includes(userId)) {
      this.following.push(userId);
      this.saveFollowing();
    }
  }

  unfollowUser(userId) {
    this.following = this.following.filter(id => id !== userId);
    this.saveFollowing();
  }

  isFollowing(userId) {
    return this.following.includes(userId);
  }

  // Social Feed
  async getFriendActivity(limit = 20) {
    // Mock friend activities
    const activities = [
      {
        id: 1,
        userId: 'friend1',
        userName: '–û–ª–µ–Ω–∞ –ö.',
        userAvatar: 'üë©',
        type: 'review',
        action: '–∑–∞–ª–∏—à–∏–ª–∞ –≤—ñ–¥–≥—É–∫',
        place: '–ö–∞—Ñ–µ "–õ—å–≤—ñ–≤—Å—å–∫–∞ –∫–∞–≤–∞"',
        rating: 5,
        timestamp: new Date(Date.now() - 1000 * 60 * 30),
        content: '–ù–µ–π–º–æ–≤—ñ—Ä–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞!'
      },
      {
        id: 2,
        userId: 'friend2',
        userName: '–ú–∞–∫—Å–∏–º –ü.',
        userAvatar: 'üë®',
        type: 'photo',
        action: '–¥–æ–¥–∞–≤ —Ñ–æ—Ç–æ',
        place: '–ü–∞—Ä–∫ –®–µ–≤—á–µ–Ω–∫–∞',
        photoCount: 3,
        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2),
        content: '–ß—É–¥–æ–≤–∏–π —Ä–∞–Ω–æ–∫ –¥–ª—è –ø—Ä–æ–±—ñ–∂–∫–∏!'
      }
    ];

    return activities.slice(0, limit);
  }

  // Nearby Friends
  async getNearbyFriends(userLocation, radius = 5000) {
    // Mock nearby friends
    const nearbyFriends = this.friends.filter(friend => {
      // Simulate distance calculation
      const distance = Math.random() * radius;
      return distance < radius;
    }).map(friend => ({
      ...friend,
      distance: Math.floor(Math.random() * radius),
      isOnline: Math.random() > 0.5,
      currentPlace: Math.random() > 0.5 ? '–ö–∞—Ñ–µ "Central"' : null
    }));

    return nearbyFriends;
  }

  // Social Recommendations
  async getSocialRecommendations(userLocation) {
    const recommendations = [
      {
        type: 'friend_visited',
        place: '–†–µ—Å—Ç–æ—Ä–∞–Ω "Bernardazzi"',
        friend: '–û–ª–µ–Ω–∞ –ö.',
        rating: 4.8,
        reason: '–í–∞—à –¥—Ä—É–≥ –≤—ñ–¥–≤—ñ–¥–∞–≤ —Ü–µ –º—ñ—Å—Ü–µ –º–∏–Ω—É–ª–æ–≥–æ —Ç–∏–∂–Ω—è'
      },
      {
        type: 'popular_among_friends',
        place: '–ö–∞—Ñ–µ "–õ—å–≤—ñ–≤—Å—å–∫–∞ –∫–∞–≤–∞"',
        friendCount: 3,
        avgRating: 4.6,
        reason: '3 –≤–∞—à–∏—Ö –¥—Ä—É–∑—ñ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—å —Ü–µ –º—ñ—Å—Ü–µ'
      }
    ];

    return recommendations;
  }

  // Group Activities
  async createGroup(name, description, members = []) {
    const group = {
      id: Date.now().toString(),
      name,
      description,
      members: [{ id: 'current_user', role: 'admin' }, ...members],
      createdAt: new Date().toISOString(),
      activities: []
    };

    return group;
  }

  async planGroupActivity(groupId, activity) {
    // Mock group activity planning
    return {
      id: Date.now().toString(),
      groupId,
      ...activity,
      createdAt: new Date().toISOString(),
      responses: []
    };
  }

  // Privacy & Settings
  updateSocialSettings(newSettings) {
    this.socialSettings = { ...this.socialSettings, ...newSettings };
    this.saveSocialSettings();
  }

  getSocialSettings() {
    return this.socialSettings;
  }

  // Social Stats
  getSocialStats() {
    return {
      friendsCount: this.friends.length,
      followingCount: this.following.length,
      followersCount: Math.floor(Math.random() * 50) + 10, // Mock
      mutualConnections: Math.floor(Math.random() * 20),
      socialScore: Math.floor(Math.random() * 100) + 50
    };
  }

  // Friend Suggestions
  async getFriendSuggestions() {
    const suggestions = [
      {
        id: 'suggestion1',
        name: '–ê–Ω–Ω–∞ –°.',
        avatar: 'üë©ü¶∞',
        mutualFriends: 3,
        commonPlaces: 5,
        reason: '3 —Å–ø—ñ–ª—å–Ω–∏—Ö –¥—Ä—É–∑—ñ'
      },
      {
        id: 'suggestion2',
        name: '–î–º–∏—Ç—Ä–æ –õ.',
        avatar: 'üë®üíº',
        mutualFriends: 1,
        commonPlaces: 8,
        reason: '–í—ñ–¥–≤—ñ–¥—É—î —Å—Ö–æ–∂—ñ –º—ñ—Å—Ü—è'
      }
    ];

    return suggestions;
  }

  // Social Notifications
  getSocialNotifications() {
    return [
      {
        id: 1,
        type: 'friend_request',
        from: '–ê–Ω–Ω–∞ –°.',
        message: '—Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ –≤–∞—Å —É –¥—Ä—É–∑—ñ',
        timestamp: new Date(Date.now() - 1000 * 60 * 60),
        action: 'accept_friend'
      },
      {
        id: 2,
        type: 'friend_activity',
        from: '–û–ª–µ–Ω–∞ –ö.',
        message: '–∑–∞–ª–∏—à–∏–ª–∞ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –º—ñ—Å—Ü–µ –ø–æ–±–ª–∏–∑—É',
        timestamp: new Date(Date.now() - 1000 * 60 * 30),
        action: 'view_review'
      }
    ];
  }
}

export default new SocialService();