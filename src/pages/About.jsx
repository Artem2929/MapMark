import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import Footer from '../components/layout/Footer';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import Toast from '../components/ui/Toast';
import './About.css';

const About = () => {
  const { t } = useTranslation();
  const [stats, setStats] = useState(null);
  const [team, setTeam] = useState([]);
  const [loading, setLoading] = useState(true);
  const [contactForm, setContactForm] = useState({ name: '', email: '', message: '' });
  const [toast, setToast] = useState(null);
  const [submitting, setSubmitting] = useState(false);
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});

  useEffect(() => {
    fetchAboutData();
  }, []);

  const fetchAboutData = async () => {
    try {
      const [statsRes, teamRes] = await Promise.all([
        fetch('http://localhost:3000/api/about/stats'),
        fetch('http://localhost:3000/api/about/team')
      ]);
      
      const statsData = await statsRes.json();
      const teamData = await teamRes.json();
      
      if (statsData.success) setStats(statsData.data);
      if (teamData.success) setTeam(teamData.data);
    } catch (error) {
      console.error('Error fetching about data:', error);
    } finally {
      setLoading(false);
    }
  };

  const validateField = (name, value) => {
    switch (name) {
      case 'name':
        if (!value.trim()) return "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
        if (value.trim().length < 2) return "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏";
        if (value.trim().length > 50) return "–Ü–º'—è –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 50 —Å–∏–º–≤–æ–ª—ñ–≤";
        return '';
      case 'email':
        if (!value.trim()) return "Email –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value.trim())) return '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email';
        return '';
      case 'message':
        if (!value.trim()) return "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
        if (value.trim().length < 10) return '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤';
        if (value.trim().length > 1000) return '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 1000 —Å–∏–º–≤–æ–ª—ñ–≤';
        return '';
      default:
        return '';
    }
  };

  const validateForm = () => {
    const newErrors = {};
    Object.keys(contactForm).forEach(key => {
      const error = validateField(key, contactForm[key]);
      if (error) newErrors[key] = error;
    });
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (name, value) => {
    setContactForm(prev => ({ ...prev, [name]: value }));
    if (touched[name]) {
      setErrors(prev => ({ ...prev, [name]: validateField(name, value) }));
    }
  };

  const handleInputBlur = (name) => {
    setTouched(prev => ({ ...prev, [name]: true }));
    setErrors(prev => ({ ...prev, [name]: validateField(name, contactForm[name]) }));
  };

  const handleContactSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      setToast({ message: '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ', type: 'error' });
      return;
    }
    
    setSubmitting(true);
    
    try {
      const response = await fetch('http://localhost:3000/api/about/contact', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: contactForm.name.trim(),
          email: contactForm.email.trim().toLowerCase(),
          message: contactForm.message.trim()
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        setContactForm({ name: '', email: '', message: '' });
        setErrors({});
        setTouched({});
        setToast({ message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', type: 'success' });
      } else {
        if (data.errors) {
          const serverErrors = {};
          data.errors.forEach(err => {
            serverErrors[err.field] = err.message;
          });
          setErrors(serverErrors);
        }
        setToast({ message: data.message || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏', type: 'error' });
      }
    } catch (error) {
      setToast({ message: '–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ', type: 'error' });
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return <LoadingSpinner message="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." />;
  }

  return (
    <>
    <div className="about-page">
      {/* Hero Section */}
      <div className="about-hero">
        <div className="about-container">
          <div className="about-hero-content">
            <h1 className="about-hero-title">–ü—Ä–æ MapMark</h1>
            <p className="about-hero-description">
              –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≥—ñ–¥ —É —Å–≤—ñ—Ç—ñ –ø–æ–¥–æ—Ä–æ–∂–µ–π. –í—ñ–¥–∫—Ä–∏–≤–∞–π—Ç–µ –Ω–æ–≤—ñ –º—ñ—Å—Ü—è, 
              –¥—ñ–ª—ñ—Ç—å—Å—è –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é–π—Ç–µ –Ω–µ–∑–∞–±—É—Ç–Ω—ñ —Å–ø–æ–≥–∞–¥–∏.
            </p>
          </div>
        </div>
      </div>

      {/* Stats Section */}
      {stats && (
        <div className="about-stats-section">
          <div className="about-container">
            <h2>–ù–∞—à—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è</h2>
            <div className="about-stats-grid">
              <div className="about-stat-card">
                <div className="about-stat-number">{stats.totalUsers}</div>
                <div className="about-stat-label">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</div>
              </div>
              <div className="about-stat-card">
                <div className="about-stat-number">{stats.totalReviews}</div>
                <div className="about-stat-label">–í—ñ–¥–≥—É–∫—ñ–≤</div>
              </div>
              <div className="about-stat-card">
                <div className="about-stat-number">{stats.totalCountries}</div>
                <div className="about-stat-label">–ö—Ä–∞—ó–Ω</div>
              </div>
              <div className="about-stat-card">
                <div className="about-stat-number">{stats.totalPhotos}</div>
                <div className="about-stat-label">–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π</div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Mission Section */}
      <div className="about-mission-section">
        <div className="about-container">
          <div className="about-mission-content">
            <h2>–ù–∞—à–∞ –º—ñ—Å—ñ—è</h2>
            <p>
              –ú–∏ –≤—ñ—Ä–∏–º–æ, —â–æ –∫–æ–∂–Ω–∞ –ø–æ–¥–æ—Ä–æ–∂ - —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–∫—Ä–∏—Ç–∏ —â–æ—Å—å –Ω–æ–≤–µ. 
              MapMark –¥–æ–ø–æ–º–∞–≥–∞—î –º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫–∞–º –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—ñ –º—ñ—Å—Ü—è, 
              –¥—ñ–ª–∏—Ç–∏—Å—è –¥–æ—Å–≤—ñ–¥–æ–º —Ç–∞ –Ω–∞–¥–∏—Ö–∞—Ç–∏ —ñ–Ω—à–∏—Ö –Ω–∞ –Ω–æ–≤—ñ –ø—Ä–∏–≥–æ–¥–∏.
            </p>
            <div className="about-features-list">
              <div className="about-feature-item">
                <span className="about-feature-icon">üó∫Ô∏è</span>
                <span>–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∫–∞—Ä—Ç–∏</span>
              </div>
              <div className="about-feature-item">
                <span className="about-feature-icon">üì∏</span>
                <span>–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—ó</span>
              </div>
              <div className="about-feature-item">
                <span className="about-feature-icon">‚≠ê</span>
                <span>–†–µ–π—Ç–∏–Ω–≥–∏ —Ç–∞ –≤—ñ–¥–≥—É–∫–∏</span>
              </div>
              <div className="about-feature-item">
                <span className="about-feature-icon">üåç</span>
                <span>–ì–ª–æ–±–∞–ª—å–Ω–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∞</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Team Section */}
      {team.length > 0 && (
        <div className="about-team-section">
          <div className="about-container">
            <h2>–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞</h2>
            <div className="about-team-grid">
              {team.map((member) => (
                <div key={member._id} className="about-team-card">
                  <div className="about-team-avatar">
                    {member.avatar ? (
                      <img src={member.avatar} alt={member.name} />
                    ) : (
                      <div className="about-avatar-placeholder">
                        {member.name.charAt(0)}
                      </div>
                    )}
                  </div>
                  <h3>{member.name}</h3>
                  <p className="about-team-role">{member.role}</p>
                  <p className="about-team-bio">{member.bio}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Contact Section */}
      <div className="about-contact-section">
        <div className="about-container">
          <h2>–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏</h2>
          <div className="about-contact-content">
            <div className="about-contact-info">
              <h3>–ú–∞—î—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è?</h3>
              <p>–ú–∏ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏! –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º, —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.</p>
              <div className="about-contact-details">
                <div className="about-contact-item">
                  <span className="about-contact-icon">üìß</span>
                  <span>support@mapmark.com</span>
                </div>
                <div className="about-contact-item">
                  <span className="about-contact-icon">üåê</span>
                  <span>www.mapmark.com</span>
                </div>
              </div>
            </div>
            <form className="about-contact-form" onSubmit={handleContactSubmit}>
              <div className="about-form-group">
                <input
                  type="text"
                  placeholder="–í–∞—à–µ —ñ–º'—è"
                  value={contactForm.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  onBlur={() => handleInputBlur('name')}
                  className={errors.name && touched.name ? 'error' : ''}
                  required
                />
                {errors.name && touched.name && (
                  <span className="about-field-error">{errors.name}</span>
                )}
              </div>
              <div className="about-form-group">
                <input
                  type="email"
                  placeholder="Email"
                  value={contactForm.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  onBlur={() => handleInputBlur('email')}
                  className={errors.email && touched.email ? 'error' : ''}
                  required
                />
                {errors.email && touched.email && (
                  <span className="about-field-error">{errors.email}</span>
                )}
              </div>
              <div className="about-form-group">
                <textarea
                  placeholder="–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                  rows="5"
                  value={contactForm.message}
                  onChange={(e) => handleInputChange('message', e.target.value)}
                  onBlur={() => handleInputBlur('message')}
                  className={errors.message && touched.message ? 'error' : ''}
                  required
                ></textarea>
                {errors.message && touched.message && (
                  <span className="about-field-error">{errors.message}</span>
                )}
              </div>
              <button type="submit" disabled={submitting || Object.keys(errors).some(key => errors[key]) || !contactForm.name.trim() || !contactForm.email.trim() || !contactForm.message.trim()}>
                {submitting ? '–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è...' : '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏'}
              </button>
            </form>
          </div>
        </div>
      </div>

      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
    </div>
    
    <Footer />
    </>
  );
};

export default About;