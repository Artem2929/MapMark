import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import StarRating from '../components/ui/StarRating';
import Breadcrumbs from '../components/ui/Breadcrumbs';
import Footer from '../components/layout/Footer';
import CustomSelect from '../components/ui/CustomSelect';
import CreateAdForm from '../components/forms/CreateAdForm';
import AdsService from '../services/adsService';
import './AdsPage.css';
import './DiscoverPlaces.css';

const AdsPage = () => {
  const [ads, setAds] = useState([]);
  const [filteredAds, setFilteredAds] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showCreateAdForm, setShowCreateAdForm] = useState(false);
  const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'map'
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('realestate');
  const [selectedSubcategory, setSelectedSubcategory] = useState('');
  const [showSubcategories, setShowSubcategories] = useState(false);
  const [filters, setFilters] = useState({
    country: '',
    region: '',
    category: '',
    rating: 0,
    distance: '',
    sortBy: 'rating',
    tags: [],
    // –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å
    operationType: '', // –ø—Ä–æ–¥–∞–∂/–æ—Ä–µ–Ω–¥–∞
    // –ê–≤—Ç–æ
    brand: '',
    model: '',
    year: '',
    price: ''
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const itemsPerPage = 12;

  const categories = [
    { 
      id: 'realestate', 
      name: '–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å', 
      emoji: 'üè†',
      subcategories: [
        { id: 'apartments', name: '–ö–≤–∞—Ä—Ç–∏—Ä–∏' },
        { id: 'houses', name: '–ë—É–¥–∏–Ω–∫–∏ —Ç–∞ –¥–∞—á—ñ' },
        { id: 'commercial', name: '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å' },
        { id: 'land', name: '–ó–µ–º–µ–ª—å–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏' },
        { id: 'garages', name: '–ì–∞—Ä–∞–∂—ñ —Ç–∞ –ø–∞—Ä–∫–æ–º—ñ—Å—Ü—è' },
        { id: 'abroad', name: '–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å –∑–∞ –∫–æ—Ä–¥–æ–Ω–æ–º' }
      ]
    },
    { 
      id: 'transport', 
      name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 
      emoji: 'üöó',
      subcategories: [
        { id: 'cars', name: '–õ–µ–≥–∫–æ–≤—ñ –∞–≤—Ç–æ' },
        { id: 'motorcycles', name: '–ú–æ—Ç–æ—Ü–∏–∫–ª–∏ / —Å–∫—É—Ç–µ—Ä–∏' },
        { id: 'trucks', name: '–ì—Ä—É–∑–æ–≤—ñ –∞–≤—Ç–æ / —Ñ—É—Ä–≥–æ–Ω–∏' },
        { id: 'commercial-transport', name: '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç' },
        { id: 'water-transport', name: '–í–æ–¥–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç' },
        { id: 'auto-parts', name: '–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏' },
        { id: 'auto-services', name: '–°–µ—Ä–≤—ñ—Å–∏ —Ç–∞ –°–¢–û' },
        { id: 'car-rental', name: '–û—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ' }
      ]
    },
    { 
      id: 'jobs', 
      name: '–†–æ–±–æ—Ç–∞', 
      emoji: 'üíº',
      subcategories: [
        { id: 'vacancies', name: '–í–∞–∫–∞–Ω—Å—ñ—ó' },
        { id: 'resumes', name: '–†–µ–∑—é–º–µ' },
        { id: 'recruiting', name: '–ü–æ—Å–ª—É–≥–∏ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥—É' },
        { id: 'freelance', name: '–¢–∏–º—á–∞—Å–æ–≤–∞ —Ä–æ–±–æ—Ç–∞/—Ñ—Ä—ñ–ª–∞–Ω—Å' }
      ]
    },
    { 
      id: 'services', 
      name: '–ü–æ—Å–ª—É–≥–∏', 
      emoji: 'üîß',
      subcategories: [
        { id: 'construction', name: '–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ —Ç–∞ —Ä–µ–º–æ–Ω—Ç–Ω—ñ' },
        { id: 'household', name: '–ü–æ–±—É—Ç–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏' },
        { id: 'education', name: '–û—Å–≤—ñ—Ç–∞ —Ç–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ' },
        { id: 'legal', name: '–Æ—Ä–∏–¥–∏—á–Ω—ñ –ø–æ—Å–ª—É–≥–∏' },
        { id: 'medical', name: '–ú–µ–¥–∏—á–Ω—ñ —Ç–∞ –¥–æ–≥–ª—è–¥' },
        { id: 'beauty', name: '–ö—Ä–∞—Å–æ—Ç–∞ —Ç–∞ —Å–∞–ª–æ–Ω–∏' },
        { id: 'it', name: 'IT —Ç–∞ —Ä–æ–∑—Ä–æ–±–∫–∞' },
        { id: 'design', name: '–î–∏–∑–∞–π–Ω —Ç–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥' },
        { id: 'transport-services', name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ —Ç–∞ –∫—É—Ä\'—î—Ä—Å—å–∫—ñ' }
      ]
    },
    { 
      id: 'electronics', 
      name: '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞', 
      emoji: 'üì±',
      subcategories: [
        { id: 'smartphones', name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω–∏ —Ç–∞ –º–æ–±—ñ–ª—å–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó' },
        { id: 'computers', name: '–ö–æ–º–ø\'—é—Ç–µ—Ä–∏, –Ω–æ—É—Ç–±—É–∫–∏, –ø–ª–∞–Ω—à–µ—Ç–∏' },
        { id: 'tv-audio', name: '–¢–í, –∞—É–¥—ñ–æ —Ç–∞ —Ñ–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç—É—Ä–∞' },
        { id: 'appliances', name: '–ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞' },
        { id: 'gaming', name: '–Ü–≥—Ä–æ–≤—ñ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏' },
        { id: 'components', name: '–ó–∞–ø—á–∞—Å—Ç–∏–Ω–∏ —Ç–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á—ñ' }
      ]
    }
  ];

  useEffect(() => {
    loadAds();
  }, [selectedCategory, selectedSubcategory, searchQuery, filters, currentPage]);



  const loadAds = async () => {
    setLoading(true);
    try {
      const params = {
        category: selectedCategory,
        subcategory: selectedSubcategory,
        search: searchQuery,
        sortBy: filters.sortBy,
        country: filters.country,
        region: filters.region,
        page: currentPage,
        limit: itemsPerPage
      };
      
      const response = await AdsService.getAds(params);
      setAds(response.data || []);
      setTotalPages(response.pagination?.pages || 1);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å:', error);
      setAds([]);
    } finally {
      setLoading(false);
    }
  };

  const applyFilters = () => {
    let filtered = [...ads];

    // –ü–æ—à—É–∫
    if (searchQuery) {
      filtered = filtered.filter(ad => 
        ad.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        ad.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // –§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if (filters.category) {
      filtered = filtered.filter(ad => ad.category === filters.category);
    }

    // –§—ñ–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    if (filters.rating > 0) {
      filtered = filtered.filter(ad => ad.rating >= filters.rating);
    }

    // –§—ñ–ª—å—Ç—Ä –ø–æ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
    if (filters.distance) {
      const maxDistance = parseInt(filters.distance);
      filtered = filtered.filter(ad => ad.distance <= maxDistance);
    }

    // –§—ñ–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞—Ö
    if (filters.tags.length > 0) {
      filtered = filtered.filter(ad => 
        filters.tags.some(tag => ad.tags.includes(tag))
      );
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    switch (filters.sortBy) {

      case 'rating':
        filtered.sort((a, b) => b.rating - a.rating);
        break;
      case 'distance':
        filtered.sort((a, b) => a.distance - b.distance);
        break;
      case 'popular':
        filtered.sort((a, b) => (b.isPopular ? 1 : 0) - (a.isPopular ? 1 : 0));
        break;
    }

    setFilteredAds(filtered);
    setTotalPages(Math.ceil(filtered.length / itemsPerPage));
    setCurrentPage(1);
  };

  const handleFilterChange = (key, value) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  const handleTagToggle = (tag) => {
    setFilters(prev => ({
      ...prev,
      tags: prev.tags.includes(tag)
        ? prev.tags.filter(t => t !== tag)
        : [...prev.tags, tag]
    }));
  };

  const clearFilters = () => {
    setFilters({
      country: '',
      region: '',
      category: '',
      rating: 0,
      distance: '',
      sortBy: 'rating',
      tags: [],
      operationType: '',
      brand: '',
      model: '',
      year: '',
      price: ''
    });
    setSearchQuery('');
  };

  // –î–∞–Ω—ñ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∞–≤—Ç–æ
  const carBrands = [
    { value: '', label: '–í—Å—ñ –º–∞—Ä–∫–∏' },
    { value: 'toyota', label: 'Toyota' },
    { value: 'volkswagen', label: 'Volkswagen' },
    { value: 'bmw', label: 'BMW' },
    { value: 'mercedes', label: 'Mercedes-Benz' },
    { value: 'audi', label: 'Audi' },
    { value: 'honda', label: 'Honda' },
    { value: 'ford', label: 'Ford' }
  ];

  const carModels = {
    toyota: [{ value: '', label: '–í—Å—ñ –º–æ–¥–µ–ª—ñ' }, { value: 'camry', label: 'Camry' }, { value: 'corolla', label: 'Corolla' }],
    volkswagen: [{ value: '', label: '–í—Å—ñ –º–æ–¥–µ–ª—ñ' }, { value: 'golf', label: 'Golf' }, { value: 'passat', label: 'Passat' }],
    bmw: [{ value: '', label: '–í—Å—ñ –º–æ–¥–µ–ª—ñ' }, { value: 'x5', label: 'X5' }, { value: '3series', label: '3 Series' }],
    '': [{ value: '', label: '–í—Å—ñ –º–æ–¥–µ–ª—ñ' }]
  };

  const carYears = Array.from({ length: 25 }, (_, i) => {
    const year = new Date().getFullYear() - i;
    return { value: year.toString(), label: year.toString() };
  });
  carYears.unshift({ value: '', label: '–í—Å—ñ —Ä–æ–∫–∏' });

  const getCategoryIcon = (category) => {
    const icons = {
      'real-estate': 'üè†',
      'auto': 'üöó',
      'jobs': 'üëî',
      cafe: '‚òï',
      restaurant: 'üçΩÔ∏è',
      park: 'üå≥',
      museum: 'üèõÔ∏è'
    };
    return icons[category] || 'üìç';
  };

  const getCategoryName = (category) => {
    const names = {
      'real-estate': '–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å',
      'auto': '–ê–≤—Ç–æ',
      'jobs': '–í–∞–∫–∞–Ω—Å—ñ—ó',
      cafe: '–ö–∞—Ñ–µ',
      restaurant: '–†–µ—Å—Ç–æ—Ä–∞–Ω',
      park: '–ü–∞—Ä–∫',
      museum: '–ú—É–∑–µ–π'
    };
    return names[category] || category;
  };

  const paginatedAds = filteredAds.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const activeFiltersCount = Object.values(filters).filter(v => 
    Array.isArray(v) ? v.length > 0 : v && v !== 'rating'
  ).length + (searchQuery ? 1 : 0);

  if (loading) {
    return (
      <div className="ads-page">
        <div className="loading-state">
          <div className="spinner">üîÑ</div>
          <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="page-container ads-page">
      <Breadcrumbs />
      
        <div className="categories-section">
          <div className="categories-scroll">
            {categories.map(category => (
              <button
                key={category.id}
                className={`category-btn ${selectedCategory === category.id ? 'active' : ''}`}
                onClick={() => {
                  if (selectedCategory === category.id) {
                    setShowSubcategories(!showSubcategories);
                  } else {
                    setSelectedCategory(category.id);
                    setSelectedSubcategory('');
                    setShowSubcategories(true);
                  }
                }}
              >
                <span className="category-emoji">{category.emoji}</span>
                <span className="category-name">{category.name}</span>
              </button>
            ))}
          </div>
          
          {showSubcategories && categories.find(cat => cat.id === selectedCategory)?.subcategories?.length > 0 && (
            <div className="subcategories-section">
              <h4>–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:</h4>
              <div className="subcategories-scroll">
                <button
                  className={`subcategory-btn ${!selectedSubcategory ? 'active' : ''}`}
                  onClick={() => setSelectedSubcategory('')}
                >
                  –í—Å—ñ
                </button>
                {categories.find(cat => cat.id === selectedCategory)?.subcategories.map(subcategory => (
                  <button
                    key={subcategory.id}
                    className={`subcategory-btn ${selectedSubcategory === subcategory.id ? 'active' : ''}`}
                    onClick={() => setSelectedSubcategory(subcategory.id)}
                  >
                    {subcategory.name}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ */}
      <div className="results-info">
        <span className="results-count">
          –ó–Ω–∞–π–¥–µ–Ω–æ {filteredAds.length} –æ–≥–æ–ª–æ—à–µ–Ω—å
        </span>
      </div>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ —Ç–∞ —Å—ñ—Ç–∫–æ—é */}
      <div className="ads-content-container">
        {/* –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ */}
        <div className="sidebar-filters">
          <button 
            className="create-ad-btn"
            onClick={() => setShowCreateAdForm(true)}
          >
            ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
          </button>
          
          <h3>–§—ñ–ª—å—Ç—Ä–∏</h3>
          
          <div className="filter-group">
            <label>–ö—Ä–∞—ó–Ω–∞</label>
            <CustomSelect
              value={filters.country}
              onChange={(value) => handleFilterChange('country', value)}
              placeholder="–í—Å—ñ –∫—Ä–∞—ó–Ω–∏"
              options={[
                { value: '', label: '–í—Å—ñ –∫—Ä–∞—ó–Ω–∏' },
                { value: 'ukraine', label: 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω–∞' },
                { value: 'poland', label: 'üáµüá± –ü–æ–ª—å—â–∞' },
                { value: 'germany', label: 'üá©üá™ –ù—ñ–º–µ—á—á–∏–Ω–∞' },
                { value: 'france', label: 'üá´üá∑ –§—Ä–∞–Ω—Ü—ñ—è' }
              ]}
            />
          </div>

          <div className="filter-group">
            <label>–û–±–ª–∞—Å—Ç—å/–ú—ñ—Å—Ç–æ</label>
            <CustomSelect
              value={filters.region}
              onChange={(value) => handleFilterChange('region', value)}
              placeholder="–í—Å—ñ –æ–±–ª–∞—Å—Ç—ñ/–º—ñ—Å—Ç–∞"
              options={[
                { value: '', label: '–í—Å—ñ –æ–±–ª–∞—Å—Ç—ñ/–º—ñ—Å—Ç–∞' },
                { value: 'kyiv', label: '–ö–∏—ó–≤' },
                { value: 'lviv', label: '–õ—å–≤—ñ–≤' },
                { value: 'odesa', label: '–û–¥–µ—Å–∞' },
                { value: 'kharkiv', label: '–•–∞—Ä–∫—ñ–≤' }
              ]}
            />
          </div>

          <div className="filter-group">
            <label>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</label>
            <CustomSelect
              value={filters.category}
              onChange={(value) => handleFilterChange('category', value)}
              placeholder="–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
              options={[
                { value: '', label: '–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó' },
                { value: 'real-estate', label: 'üè† –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å' },
                { value: 'auto', label: 'üöó –ê–≤—Ç–æ' },
                { value: 'jobs', label: 'üëî –í–∞–∫–∞–Ω—Å—ñ—ó' },
                { value: 'cafe', label: '‚òï –ö–∞—Ñ–µ' },
                { value: 'restaurant', label: 'üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω' },
                { value: 'park', label: 'üå≥ –ü–∞—Ä–∫' },
                { value: 'museum', label: 'üèõÔ∏è –ú—É–∑–µ–π' }
              ]}
            />
          </div>

          <div className="filter-group">
            <label>–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</label>
            <CustomSelect
              value={filters.sortBy}
              onChange={(value) => handleFilterChange('sortBy', value)}
              placeholder="–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"
              options={[
                { value: 'distance', label: '–ó–∞ –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é' },
                { value: 'popular', label: '–ü–æ–ø—É–ª—è—Ä–Ω—ñ' }
              ]}
            />
          </div>

          {/* –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ */}
          {filters.category === 'real-estate' && (
            <div className="filter-group">
              <label>–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó</label>
              <CustomSelect
                value={filters.operationType}
                onChange={(value) => handleFilterChange('operationType', value)}
                placeholder="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø"
                options={[
                  { value: '', label: '–í—Å—ñ —Ç–∏–ø–∏' },
                  { value: 'sale', label: '–ü—Ä–æ–¥–∞–∂' },
                  { value: 'rent', label: '–û—Ä–µ–Ω–¥–∞' }
                ]}
              />
            </div>
          )}

          {/* –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –∞–≤—Ç–æ */}
          {filters.category === 'auto' && (
            <>
              <div className="filter-group">
                <label>–ú–∞—Ä–∫–∞</label>
                <CustomSelect
                  value={filters.brand}
                  onChange={(value) => {
                    handleFilterChange('brand', value);
                    handleFilterChange('model', ''); // –°–∫–∏–¥–∞—î–º–æ –º–æ–¥–µ–ª—å –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–∞—Ä–∫–∏
                  }}
                  placeholder="–û–±–µ—Ä—ñ—Ç—å –º–∞—Ä–∫—É"
                  options={carBrands}
                />
              </div>

              {filters.brand && (
                <div className="filter-group">
                  <label>–ú–æ–¥–µ–ª—å</label>
                  <CustomSelect
                    value={filters.model}
                    onChange={(value) => handleFilterChange('model', value)}
                    placeholder="–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å"
                    options={carModels[filters.brand] || carModels['']}
                  />
                </div>
              )}

              <div className="filter-group">
                <label>–†—ñ–∫ –≤–∏–ø—É—Å–∫—É</label>
                <CustomSelect
                  value={filters.year}
                  onChange={(value) => handleFilterChange('year', value)}
                  placeholder="–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫"
                  options={carYears}
                />
              </div>

              <div className="filter-group">
                <label>–¶—ñ–Ω–∞</label>
                <CustomSelect
                  value={filters.price}
                  onChange={(value) => handleFilterChange('price', value)}
                  placeholder="–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–Ω—É"
                  options={[
                    { value: '', label: '–ë—É–¥—å-—è–∫–∞ —Ü—ñ–Ω–∞' },
                    { value: '0-5000', label: '–î–æ $5,000' },
                    { value: '5000-10000', label: '$5,000 - $10,000' },
                    { value: '10000-20000', label: '$10,000 - $20,000' },
                    { value: '20000-50000', label: '$20,000 - $50,000' },
                    { value: '50000+', label: '–í—ñ–¥ $50,000' }
                  ]}
                />
              </div>
            </>
          )}

          {activeFiltersCount > 0 && (
            <button className="clear-filters-btn" onClick={clearFilters}>
              –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ ({activeFiltersCount})
            </button>
          )}
        </div>

        {/* –°–ø–∏—Å–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å—Ç–∞–Ω */}
        <div className="ads-main-content">
          {filteredAds.length === 0 ? (
            <div className="empty-state">
              <div>üîç</div>
              <h3>–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
              <p>–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç</p>
              <button className="clear-filters-btn" onClick={clearFilters}>
                –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
              </button>
            </div>
          ) : (
            viewMode === 'grid' && (
              <div className="ads-grid">
                {paginatedAds.map(ad => (
                <Link key={ad.id} to={`/ads/${ad.id}`} className="ads-ad-card">
                  <div className="ads-ad-image">
                    <img src={ad.image} alt={ad.title} />
                    <div className="ads-ad-badges">
                      {ad.isNew && <span className="ads-badge ads-new">–ù–æ–≤–µ</span>}
                      {ad.isPopular && <span className="ads-badge ads-popular">–ü–æ–ø—É–ª—è—Ä–Ω–µ</span>}
                      {ad.hasPromo && <span className="ads-badge ads-promo">–ê–∫—Ü—ñ—è</span>}
                    </div>
                    <div className="ads-ad-distance">{ad.distance} –∫–º</div>
                  </div>
                  
                  <div className="ads-ad-content">
                    <div className="ads-ad-category">
                      {getCategoryIcon(ad.category)} {getCategoryName(ad.category)}
                    </div>
                    
                    <h3 className="ads-ad-title">{ad.title}</h3>
                    
                    <div className="ads-ad-footer">
                      <div className="ads-ad-rating">
                        <StarRating rating={ad.rating} size="small" />
                        <span className="ads-rating-text">{ad.rating.toFixed(1)}</span>
                      </div>
                      
                      <div className="ads-ad-tags">
                        {ad.tags.slice(0, 2).map(tag => (
                          <span key={tag} className="ads-ad-tag">{tag}</span>
                        ))}
                        {ad.tags.length > 2 && (
                          <span className="ads-more-tags">+{ad.tags.length - 2}</span>
                        )}
                      </div>
                    </div>
                  </div>
                </Link>
                ))}
              </div>
            )
          )}
        </div>
      </div>

      {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è */}
      {totalPages > 1 && (
        <div className="pagination">
          <button 
            className="page-btn"
            disabled={currentPage === 1}
            onClick={() => setCurrentPage(prev => prev - 1)}
          >
            ‚Üê –ü–æ–ø–µ—Ä–µ–¥–Ω—è
          </button>
          
          <div className="page-numbers">
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              const page = i + 1;
              return (
                <button
                  key={page}
                  className={`page-number ${currentPage === page ? 'active' : ''}`}
                  onClick={() => setCurrentPage(page)}
                >
                  {page}
                </button>
              );
            })}
          </div>
          
          <button 
            className="page-btn"
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage(prev => prev + 1)}
          >
            –ù–∞—Å—Ç—É–ø–Ω–∞ ‚Üí
          </button>
        </div>
      )}


      
      {showCreateAdForm && (
        <CreateAdForm onClose={() => setShowCreateAdForm(false)} />
      )}
      
      <Footer />
    </div>
  );
};

export default AdsPage;