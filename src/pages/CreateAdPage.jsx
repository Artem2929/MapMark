import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import InteractiveMap from '../components/features/InteractiveMap';
import PhotoUpload from '../components/features/PhotoUpload';
import StarRating from '../components/ui/StarRating';
import Breadcrumbs from '../components/ui/Breadcrumbs';
import './CreateAdPage.css';

const CreateAdPage = () => {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    title: '',
    address: '',
    location: null,
    category: '',
    photos: [],
    shortDescription: '',
    detailedDescription: '',
    overallRating: 0,
    categoryRatings: {
      price: 0,
      cleanliness: 0,
      atmosphere: 0,
      service: 0
    },
    tags: [],
    workingHours: '',
    contacts: '',
    promoCode: '',
    isAnonymous: false,
    acceptPolicy: false
  });
  
  const [errors, setErrors] = useState({});
  const [showPreview, setShowPreview] = useState(false);

  const totalSteps = 5;
  const maxChars = {
    title: 100,
    shortDescription: 200,
    detailedDescription: 1000
  };

  useEffect(() => {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫—É –∑ localStorage
    const savedDraft = localStorage.getItem('adDraft');
    if (savedDraft) {
      setFormData(JSON.parse(savedDraft));
    }
  }, []);

  useEffect(() => {
    // –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–Ω–µ—Ç–∫–∏
    const timer = setTimeout(() => {
      localStorage.setItem('adDraft', JSON.stringify(formData));
    }, 1000);
    return () => clearTimeout(timer);
  }, [formData]);

  const validateStep = (step) => {
    const newErrors = {};
    
    switch (step) {
      case 1:
        if (!formData.title.trim()) newErrors.title = "–ù–∞–∑–≤–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞";
        if (!formData.address.trim()) newErrors.address = "–ê–¥—Ä–µ—Å–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞";
        if (!formData.category) newErrors.category = "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é";
        break;
      case 2:
        if (!formData.location) newErrors.location = "–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –Ω–∞ –º–∞–ø—ñ";
        break;
      case 3:
        if (formData.photos.length === 0) newErrors.photos = "–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ";
        break;
      case 4:
        if (!formData.shortDescription.trim()) newErrors.shortDescription = "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
        if (formData.overallRating === 0) newErrors.overallRating = "–ü–æ—Å—Ç–∞–≤—Ç–µ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥";
        break;
      case 5:
        if (!formData.acceptPolicy) newErrors.acceptPolicy = "–ü—Ä–∏–π–º—ñ—Ç—å –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ";
        break;
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, totalSteps));
    }
  };

  const handlePrev = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
  };

  const handleTagAdd = (tag) => {
    if (!formData.tags.includes(tag)) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, tag]
      }));
    }
  };

  const handleTagRemove = (tag) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(t => t !== tag)
    }));
  };

  const handleSubmit = async () => {
    if (!validateStep(5)) return;
    
    try {
      // –°–∏–º—É–ª—è—Ü—ñ—è API –≤–∏–∫–ª–∏–∫—É
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –û—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫—É
      localStorage.removeItem('adDraft');
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—Ö—É
      navigate('/ads/success');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:', error);
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="step-content">
            <h2>–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h2>
            
            <div className="form-group">
              <label>–ù–∞–∑–≤–∞ –º—ñ—Å—Ü—è *</label>
              <div className="input-wrapper">
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => handleInputChange('title', e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó–∞—Ç–∏—à–Ω–µ –∫–∞—Ñ–µ –≤ —Ü–µ–Ω—Ç—Ä—ñ"
                  maxLength={maxChars.title}
                  className={errors.title ? 'error' : ''}
                />
                <span className="char-count">
                  {formData.title.length}/{maxChars.title}
                </span>
              </div>
              {errors.title && <span className="error-message">{errors.title}</span>}
            </div>

            <div className="form-group">
              <label>–ê–¥—Ä–µ—Å–∞ *</label>
              <input
                type="text"
                value={formData.address}
                onChange={(e) => handleInputChange('address', e.target.value)}
                placeholder="–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 22, –ö–∏—ó–≤"
                className={errors.address ? 'error' : ''}
              />
              {errors.address && <span className="error-message">{errors.address}</span>}
            </div>

            <div className="form-group">
              <label>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è *</label>
              <select
                value={formData.category}
                onChange={(e) => handleInputChange('category', e.target.value)}
                className={errors.category ? 'error' : ''}
              >
                <option value="">–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é</option>
                <option value="cafe">‚òï –ö–∞—Ñ–µ</option>
                <option value="restaurant">üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω</option>
                <option value="park">üå≥ –ü–∞—Ä–∫</option>
                <option value="museum">üèõÔ∏è –ú—É–∑–µ–π</option>
                <option value="shop">üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</option>
                <option value="hotel">üè® –ì–æ—Ç–µ–ª—å</option>
              </select>
              {errors.category && <span className="error-message">{errors.category}</span>}
            </div>
          </div>
        );

      case 2:
        return (
          <div className="step-content">
            <h2>–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –Ω–∞ –º–∞–ø—ñ</h2>
            <p>–û–±–µ—Ä—ñ—Ç—å —Ç–æ—á–Ω–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –º—ñ—Å—Ü—è –Ω–∞ –º–∞–ø—ñ</p>
            
            <InteractiveMap
              address={formData.address}
              onLocationSelect={(location) => handleInputChange('location', location)}
              selectedLocation={formData.location}
            />
            
            {errors.location && <span className="error-message">{errors.location}</span>}
          </div>
        );

      case 3:
        return (
          <div className="step-content">
            <h2>–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó</h2>
            <p>–î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à–µ –º—ñ—Å—Ü–µ –∑ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –±–æ–∫—É</p>
            
            <PhotoUpload
              photos={formData.photos}
              onPhotosChange={(photos) => handleInputChange('photos', photos)}
              maxPhotos={10}
            />
            
            {errors.photos && <span className="error-message">{errors.photos}</span>}
          </div>
        );

      case 4:
        return (
          <div className="step-content">
            <h2>–û–ø–∏—Å —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥</h2>
            
            <div className="form-group">
              <label>–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å *</label>
              <div className="input-wrapper">
                <textarea
                  value={formData.shortDescription}
                  onChange={(e) => handleInputChange('shortDescription', e.target.value)}
                  placeholder="–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ü–µ..."
                  maxLength={maxChars.shortDescription}
                  rows={3}
                  className={errors.shortDescription ? 'error' : ''}
                />
                <span className="char-count">
                  {formData.shortDescription.length}/{maxChars.shortDescription}
                </span>
              </div>
              {errors.shortDescription && <span className="error-message">{errors.shortDescription}</span>}
            </div>

            <div className="form-group">
              <label>–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å</label>
              <div className="input-wrapper">
                <textarea
                  value={formData.detailedDescription}
                  onChange={(e) => handleInputChange('detailedDescription', e.target.value)}
                  placeholder="–†–æ–∑–∫–∞–∂—ñ—Ç—å –±—ñ–ª—å—à–µ –ø—Ä–æ –≤–∞—à–µ –º—ñ—Å—Ü–µ..."
                  maxLength={maxChars.detailedDescription}
                  rows={5}
                />
                <span className="char-count">
                  {formData.detailedDescription.length}/{maxChars.detailedDescription}
                </span>
              </div>
            </div>

            <div className="form-group">
              <label>–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ *</label>
              <StarRating
                rating={formData.overallRating}
                onRatingChange={(rating) => handleInputChange('overallRating', rating)}
                size="large"
                interactive={true}
              />
              {errors.overallRating && <span className="error-message">{errors.overallRating}</span>}
            </div>

            <div className="category-ratings">
              <h3>–†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö</h3>
              {Object.entries(formData.categoryRatings).map(([category, rating]) => (
                <div key={category} className="category-rating">
                  <span className="category-name">{category}</span>
                  <StarRating
                    rating={rating}
                    onRatingChange={(newRating) => 
                      setFormData(prev => ({
                        ...prev,
                        categoryRatings: {
                          ...prev.categoryRatings,
                          [category]: newRating
                        }
                      }))
                    }
                    interactive={true}
                  />
                </div>
              ))}
            </div>
          </div>
        );

      case 5:
        return (
          <div className="step-content">
            <h2>–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h2>
            
            <div className="form-group">
              <label>–¢–µ–≥–∏</label>
              <div className="tags-input">
                <div className="popular-tags">
                  {['Wi-Fi', '–ü–∞—Ä–∫—ñ–Ω–≥', '–í–µ–≥–∞–Ω-—Ñ—Ä–µ–Ω–¥–ª—ñ', '–†–æ–º–∞–Ω—Ç–∏–∫–∞', '–§—Ä—ñ–ª–∞–Ω—Å', 'Kids Friendly'].map(tag => (
                    <button
                      key={tag}
                      type="button"
                      className={`tag-btn ${formData.tags.includes(tag) ? 'active' : ''}`}
                      onClick={() => formData.tags.includes(tag) ? handleTagRemove(tag) : handleTagAdd(tag)}
                    >
                      {tag}
                    </button>
                  ))}
                </div>
              </div>
            </div>

            <div className="form-group">
              <label>–ß–∞—Å —Ä–æ–±–æ—Ç–∏</label>
              <input
                type="text"
                value={formData.workingHours}
                onChange={(e) => handleInputChange('workingHours', e.target.value)}
                placeholder="–ü–Ω-–ü—Ç: 08:00-22:00, –°–±-–ù–¥: 10:00-20:00"
              />
            </div>

            <div className="form-group">
              <label>–ö–æ–Ω—Ç–∞–∫—Ç–∏</label>
              <input
                type="text"
                value={formData.contacts}
                onChange={(e) => handleInputChange('contacts', e.target.value)}
                placeholder="+380 XX XXX XX XX"
              />
            </div>

            <div className="form-group">
              <label>–ü—Ä–æ–º–æ–∫–æ–¥/–ê–∫—Ü—ñ—è</label>
              <input
                type="text"
                value={formData.promoCode}
                onChange={(e) => handleInputChange('promoCode', e.target.value)}
                placeholder="–ó–Ω–∏–∂–∫–∞ 10% –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º WELCOME"
              />
            </div>

            <div className="checkbox-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={formData.isAnonymous}
                  onChange={(e) => handleInputChange('isAnonymous', e.target.checked)}
                />
                –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–æ
              </label>
            </div>

            <div className="checkbox-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={formData.acceptPolicy}
                  onChange={(e) => handleInputChange('acceptPolicy', e.target.checked)}
                  className={errors.acceptPolicy ? 'error' : ''}
                />
                –Ø –ø—Ä–∏–π–º–∞—é –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ *
              </label>
              {errors.acceptPolicy && <span className="error-message">{errors.acceptPolicy}</span>}
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="create-ad-page">
      <Breadcrumbs items={[
        { label: '–ì–æ–ª–æ–≤–Ω–∞', link: '/', icon: 'üè†' },
        { label: '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è', link: '/ads', icon: 'üìã' },
        { label: '–°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è', icon: '‚ûï' }
      ]} />
      <div className="progress-header">
        <div className="progress-bar">
          <div 
            className="progress-fill"
            style={{ width: `${(currentStep / totalSteps) * 100}%` }}
          />
        </div>
        <span className="progress-text">
          –ö—Ä–æ–∫ {currentStep} –∑ {totalSteps}
        </span>

      </div>

      <div className="form-container">
        {renderStep()}
      </div>

      <div className="form-actions">
        <div className="left-actions">
          {currentStep > 1 && (
            <button className="btn-secondary" onClick={handlePrev}>
              ‚Üê –ù–∞–∑–∞–¥
            </button>
          )}
          <button 
            className="btn-outline"
            onClick={() => setShowPreview(true)}
          >
            üëÅÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
          </button>
        </div>

        <div className="right-actions">
          {currentStep < totalSteps ? (
            <button className="btn-primary" onClick={handleNext}>
              –î–∞–ª—ñ ‚Üí
            </button>
          ) : (
            <button className="btn-success" onClick={handleSubmit}>
              üöÄ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏
            </button>
          )}
        </div>
      </div>

      {showPreview && (
        <div className="preview-modal">
          <div className="preview-content">
            <div className="preview-header">
              <h3>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥</h3>
              <button onClick={() => setShowPreview(false)}>‚úï</button>
            </div>
            <div className="preview-body">
              <h2>{formData.title}</h2>
              <p>{formData.address}</p>
              <p>{formData.shortDescription}</p>
              {/* –î–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É */}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CreateAdPage;